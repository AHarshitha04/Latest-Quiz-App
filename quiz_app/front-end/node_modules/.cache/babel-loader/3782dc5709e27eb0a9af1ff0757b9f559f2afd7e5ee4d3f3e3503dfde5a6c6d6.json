{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\projectH\\\\Latest-Quiz-App\\\\quiz_app\\\\front-end\\\\src\\\\Pages\\\\Paper\\\\Paper.jsx\",\n  _s = $RefreshSig$();\n// test commit\n\n// import React, { useEffect, useState } from 'react';\n// import quiz from '../../Data/quesAns'\n// import './Paper.css'\n// import RightSidebar from '../../Components/RightSidebar/RightSidebar';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader'\n\n// // Defining Timer code \n// const formatTime = (time) => {\n//     let minutes = Math.floor(time / 60);\n//     let seconds = Math.floor(time - minutes * 60);\n\n//     if (minutes < 10) minutes = '0' + minutes;\n//     if (seconds < 10) seconds = '0' + seconds;\n//     return minutes + ':' + seconds;\n// }; // End of Defining Timer code \n\n// const Paper = ({ seconds, answeredQuestions }) => {\n\n//     const [activeQuestion, setActiveQuestion] = useState(0);\n//     const handleQuestionSelect = (questionNumber) => {\n//         setActiveQuestion(questionNumber - 1);\n//     }\n\n//     // const [questionStatus, setQuestionStatus] = useState(Array(30).fill('notAnswered'))\n//     // const [activeQuestion, setActiveQuestion] = useState(0)\n//     // const [selectedAnswer, setSelectedAnswer] = useState('') \n\n//     const [selectedAnswers, setSelectedAnswers] = useState(new Array(quiz.questions.length).fill(''));\n//     const [showResult, setShowResult] = useState(false)\n//     const [result, setResult] = useState({\n//         score: 0,\n//         correctAnswers: 0,\n//         wrongAnswers: 0,\n//     })\n\n//     const { questions } = quiz\n//     const { question, choices, correctAnswer } = questions[activeQuestion]\n//     const onClickNext = () => {\n//         setResult((prev) =>\n//             selectedAnswers[activeQuestion] === correctAnswer\n//                 ? {\n//                     ...prev,\n//                     score: prev.score + 5,\n//                     correctAnswers: prev.correctAnswers + 1,\n//                 }\n//                 : { ...prev, wrongAnswers: prev.wrongAnswers + 1 }\n//         );\n//         if (activeQuestion !== questions.length - 1) {\n//             setActiveQuestion((prev) => prev + 1);\n//         } else {\n//             // setActiveQuestion(0);\n//             setShowResult(true);\n//             calculateResult();//new added code\n//         }\n//     };\n\n//     const onAnswerSelected = (OptionLetter) => {\n//         // Update the selected answer for the current question\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = OptionLetter;\n//         setSelectedAnswers(updatedSelectedAnswers);\n//         // setSelectedAnswers(updatedSelectedAnswers, OptionLetter);\n\n//     };\n\n//     const clearResponse = () => {\n//         // Clear the response for the current question\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = '';\n//         setSelectedAnswers(updatedSelectedAnswers);\n//     };\n\n//     const goToPreviousQuestion = () => {\n//         // Move to the previous question\n//         if (activeQuestion > 0) {\n//             setActiveQuestion((prev) => prev - 1);\n//         }\n//     };\n\n//     const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\n//     const [countdown, setCountDown] = useState(seconds);\n//     useEffect(() => {\n//         const timerId = setInterval(() => {\n//             setCountDown((prevCountDown) =>\n//                 prevCountDown - 1\n//             );\n//         }, 1000)\n//         return () => {\n//             clearInterval(timerId);\n//         };\n//     }, [])\n\n//     useEffect(() => {\n//         if (countdown <= 0) {\n//             setShowResult(true);\n//             // clearInterval(timerId.current);\n//             // alert(\"End\");\n//         }\n//     }, [countdown]);\n\n//    // NEW ADDED CODE\n\n//     // const [showResult, setShowResult] = useState(false);\n//     const [accuracy, setAccuracy] = useState(0);\n//     const [averageScore, setAverageScore] = useState(0);\n//     const [topScore, setTopScore] = useState(0);\n//     const [liveRank, setLiveRank] = useState(0);\n\n//     const calculateResult = () => {\n//         // Calculate accuracy\n//         const totalAttempted = answeredQuestions.length;\n//         const totalCorrect = result.correctAnswers;\n//         const calculatedAccuracy = (totalCorrect / totalAttempted) * 100;\n//         setAccuracy(calculatedAccuracy.toFixed(2));\n\n//         // Calculate average score\n//         const calculatedAverageScore = result.score / totalAttempted;\n//         setAverageScore(calculatedAverageScore.toFixed(2));\n\n//         // Placeholder for live ranking data - Replace this with actual data\n//         const calculatedTopScore = 100;\n//         const calculatedLiveRank = 1;\n\n//         setTopScore(calculatedTopScore);\n//         setLiveRank(calculatedLiveRank);\n//     };\n\n//     // const onClickSubmit = () => {\n//     //     calculateResult();\n//     //     setShowResult(true);\n//     // };\n\n//     return (\n\n//         <div className='main'>\n//             <div className='sub-main'>\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     {!showResult ? (\n//                         <div>\n//                             <div className='subjects'>\n//                                 <button className='subject-btn'>Mathematics</button>\n//                                 <button className='subject-btn'>Physics</button>\n//                                 <button className='subject-btn'>Chemistry</button>\n//                             </div>\n//                             <div className='second-header'>\n//                                 <div className='single-select-question'>\n//                                     Single Select Question\n//                                 </div>\n//                                 <div className='right-header'>\n//                                     <div className='marks'>\n//                                         Marks: <div className='plus-mark'>+1</div>\n//                                         <div className='minus-mark'>-1</div>\n//                                     </div>\n//                                     <div className='timer'>\n//                                         <h3>Time Left: {formatTime(countdown)}</h3>\n//                                     </div>\n//                                 </div>\n//                             </div>\n//                             <div className='question-no'>\n//                                 <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\n//                                 <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\n//                             </div>\n\n//                             <h2 className='question'><img src={question} alt=\"question\" /></h2>\n\n//                             <ul className='options-container'>\n//                                 {choices.map((answer, index) => (\n//                                     <li key={answer}>\n//                                         <input type=\"radio\"\n//                                             // id={answer}\n//                                             id={`option-${index}`}\n//                                             name='answer'\n//                                             value={answer}\n//                                             checked={selectedAnswers[activeQuestion] === answer}\n//                                             onChange={() => onAnswerSelected(answer)} />\n\n//                                         <label className='alpha-index' htmlFor={`option-${index}`}>\n//                                             {/* htmlFor={answer} */}\n//                                             {String.fromCharCode(65 + index)}.\n//                                             <img src={answer} alt=\"answer\" />\n//                                         </label>\n//                                     </li>\n//                                 ))}\n//                             </ul>\n\n//                             <div className=\"flex-right\">\n//                                 <button className='clear-btn'>Mark for Review & Next</button>\n//                                 <button className='clear-btn' onClick={clearResponse}>Clear Response</button>\n//                                 <button className='previous-btn' onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\n//                                     <i class=\"fa-solid fa-angles-left\"></i>\n//                                     Previous\n//                                 </button>\n//                                 <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\n//                                     {activeQuestion === questions.length - 1 ? 'Submit' : 'Save & Next'}<i class=\"fa-solid fa-angles-right\"></i>\n//                                 </button>\n\n//                             </div>\n//                         </div>\n//                     ) : (\n//                         <div className=\"result\">\n//                             <h3>Result</h3>\n//                             <p>\n//                                 Total Questions: <span>{questions.length}</span>\n//                             </p>\n//                             <p>\n//                                 Total Score:<span> {result.score}</span>\n//                             </p>\n//                             <p>\n//                                 Correct Answers:<span> {result.correctAnswers}</span>\n//                             </p>\n//                             <p>\n//                                 Wrong Answers:<span> {result.wrongAnswers}</span>\n//                             </p>\n//                             <p>\n//                                 Accuracy:<span> {accuracy}%</span>\n//                             </p>\n//                             <p>\n//                                 Average Score:<span> {averageScore}</span>\n//                             </p>\n//                             <p>\n//                                 Top Score:<span> {topScore}</span>\n//                             </p>\n//                             <p>\n//                                 Live Rank:<span> {liveRank}</span>\n//                             </p>\n//                         </div>\n//                     )}\n//                 </div>\n//             </div>\n//             <div className='rightsidebar'><RightSidebar onQuestionSelect={handleQuestionSelect} answeredQuestions={answeredQuestions} /></div>\n//         </div>\n\n//     )\n// }\n\n// export default Paper\n\n// import React, { useEffect, useState } from 'react';\n// // import quiz from '../../Data/quesAns'\n// import './Paper.css'\n// // import RightSidebar from '../../Components/RightSidebar/RightSidebar';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader'\n\n// // Defining Timer code \n// // const formatTime = (time) => {\n// //     let minutes = Math.floor(time / 60);\n// //     let seconds = Math.floor(time - minutes * 60);\n\n// //     if (minutes < 10) minutes = '0' + minutes;\n// //     if (seconds < 10) seconds = '0' + seconds;\n// //     return minutes + ':' + seconds;\n// // }; // End of Defining Timer code \n\n// const Paper = () => {\n\n//     // const [activeQuestion, setActiveQuestion] = useState(0);\n//     // const handleQuestionSelect = (questionNumber) => {\n//     //     setActiveQuestion(questionNumber - 1);\n//     // }\n\n//     // const [questionStatus, setQuestionStatus] = useState(Array(30).fill('notAnswered'))\n//     // const [activeQuestion, setActiveQuestion] = useState(0)\n//     // const [selectedAnswer, setSelectedAnswer] = useState('') \n\n//     // const [selectedAnswers, setSelectedAnswers] = useState(new Array(quiz.questions.length).fill(''));\n//     // const [showResult, setShowResult] = useState(false)\n//     // const [result, setResult] = useState({\n//     //     score: 0,\n//     //     correctAnswers: 0,\n//     //     wrongAnswers: 0,\n//     // })\n\n//     // const { questions } = quiz\n//     // const { Qimages, OPTimages, correctAnswer } = [activeQuestion]\n//     // const onClickNext = () => {\n//     //     setResult((prev) =>\n//     //         selectedAnswers[activeQuestion] === correctAnswer\n//     //             ? {\n//     //                 ...prev,\n//     //                 score: prev.score + 5,\n//     //                 correctAnswers: prev.correctAnswers + 1,\n//     //             }\n//     //             : { ...prev, wrongAnswers: prev.wrongAnswers + 1 }\n//     //     );\n//     //     if (activeQuestion !== questions.length - 1) {\n//     //         setActiveQuestion((prev) => prev + 1);\n//     //     } else {\n//     //         // setActiveQuestion(0);\n//     //         setShowResult(true);\n//     //         calculateResult();//new added code\n//     //     }\n//     // };\n\n//     // const onAnswerSelected = (OptionLetter) => {\n//     //     // Update the selected answer for the current question\n//     //     const updatedSelectedAnswers = [...selectedAnswers];\n//     //     updatedSelectedAnswers[activeQuestion] = OptionLetter;\n//     //     setSelectedAnswers(updatedSelectedAnswers);\n//     //     // setSelectedAnswers(updatedSelectedAnswers, OptionLetter);\n\n//     // };\n\n//     // const clearResponse = () => {\n//     //     // Clear the response for the current question\n//     //     const updatedSelectedAnswers = [...selectedAnswers];\n//     //     updatedSelectedAnswers[activeQuestion] = '';\n//     //     setSelectedAnswers(updatedSelectedAnswers);\n//     // };\n\n//     // const goToPreviousQuestion = () => {\n//     //     // Move to the previous question\n//     //     if (activeQuestion > 0) {\n//     //         setActiveQuestion((prev) => prev - 1);\n//     //     }\n//     // };\n\n//     // const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\n//     // const [countdown, setCountDown] = useState(seconds);\n//     // useEffect(() => {\n//     //     const timerId = setInterval(() => {\n//     //         setCountDown((prevCountDown) =>\n//     //             prevCountDown - 1\n//     //         );\n//     //     }, 1000)\n//     //     return () => {\n//     //         clearInterval(timerId);\n//     //     };\n//     // }, [])\n\n//     // useEffect(() => {\n//     //     if (countdown <= 0) {\n//     //         setShowResult(true);\n//     //         // clearInterval(timerId.current);\n//     //         // alert(\"End\");\n//     //     }\n//     // }, [countdown]);\n\n//     // NEW ADDED CODE\n\n//     // const [showResult, setShowResult] = useState(false);\n//     // const [accuracy, setAccuracy] = useState(0);\n//     // const [averageScore, setAverageScore] = useState(0);\n//     // const [topScore, setTopScore] = useState(0);\n//     // const [liveRank, setLiveRank] = useState(0);\n\n//     // const calculateResult = () => {\n//     //     // Calculate accuracy\n//     //     const totalAttempted = answeredQuestions.length;\n//     //     const totalCorrect = result.correctAnswers;\n//     //     const calculatedAccuracy = (totalCorrect / totalAttempted) * 100;\n//     //     setAccuracy(calculatedAccuracy.toFixed(2));\n\n//     //     // Calculate average score\n//     //     const calculatedAverageScore = result.score / totalAttempted;\n//     //     setAverageScore(calculatedAverageScore.toFixed(2));\n\n//     //     // Placeholder for live ranking data - Replace this with actual data\n//     //     const calculatedTopScore = 100;\n//     //     const calculatedLiveRank = 1;\n\n//     //     setTopScore(calculatedTopScore);\n//     //     setLiveRank(calculatedLiveRank);\n//     // };\n\n//     // const onClickSubmit = () => {\n//     //     calculateResult();\n//     //     setShowResult(true);\n//     // };\n\n//     const [Qimages,setQImages] = useState([]);\n//     const [OPTimages,setOPTImages] = useState([]);\n\n//     useEffect(() => {\n//         // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n//         const fetchQImages = async () => {\n//             let fetchedQImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     const response = await fetch(`http://localhost:7000/images/${i}`);\n//                     const data = await response.json();\n//                     if (data.length > 0) {\n//                         fetchedQImages.push(data[0]); // Add only the first image from each set\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching Qimages:', error);\n//                 }\n//             }\n\n//             setQImages(fetchedQImages);\n//         };\n\n//         // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n//         const fetchOPTImages = async () => {\n//             let fetchedOPTImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     for (let j = i + 1; j <= i + 4; j++) {\n//                         const response = await fetch(`http://localhost:7000/images/${j}`);\n//                         const data = await response.json();\n//                         if (data.length > 0) {\n//                             fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n//                         }\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching OPTimages:', error);\n//                 }\n//             }\n\n//             setOPTImages(fetchedOPTImages);\n//         };\n\n//         fetchQImages();\n//         fetchOPTImages();\n//     }, []); // Empty dependency array to fetch data only once when the component mounts\n\n//     return (\n\n//         <div className='main'>\n//             <div className='sub-main'>\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     {/* {!showResult ? ( */}\n//                         <div>\n//                             <div className='subjects'>\n//                                 <button className='subject-btn'>Mathematics</button>\n//                                 <button className='subject-btn'>Physics</button>\n//                                 <button className='subject-btn'>Chemistry</button>\n//                             </div>\n//                             <div className='second-header'>\n//                                 <div className='single-select-question'>\n//                                     Single Select Question\n//                                 </div>\n//                                 {/* <div className='right-header'>\n//                                     <div className='marks'>\n//                                         Marks: <div className='plus-mark'>+1</div>\n//                                         <div className='minus-mark'>-1</div>\n//                                     </div>\n//                                     <div className='timer'>\n//                                         <h3>Time Left: {formatTime(countdown)}</h3>\n//                                     </div>\n//                                 </div> */}\n//                             </div>\n//                             {/* <div className='question-no'>\n//                                 <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\n//                                 <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\n//                             </div> */}\n\n//                             {Qimages.map((qImage, index) => (\n//                                 <div key={index}>\n//                                     {/* <h2>QImage {index + 1}</h2> */}\n//                                     {/* <div className='question-no'>\n//                                         <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\n//                                         <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\n//                                     </div> */}\n//                                     <h2 className='question'> <img\n//                                         src={`data:image/png;base64,${qImage.image_data}`}\n//                                         alt={`QImage ${index + 1}`}\n//                                     /></h2>\n\n//                                     <ul className='options-container'>\n//                                         {OPTimages.slice(index * 4, index * 4 + 4).map((optImage, optIndex) => (\n//                                             <li>\n//                                                 <input type=\"radio\"\n//                                                 // // id={answer}\n//                                                 //     id={`option-${index}`}\n//                                                 //     name='answer'\n//                                                 //     value={optImage}\n//                                                 //     checked={selectedAnswers[activeQuestion] === optImage}\n//                                                 //     onChange={() => onAnswerSelected(optImage)} \n//                                                 />\n\n//                                                 <label className='alpha-index' >\n//                                                     <img\n//                                                         key={optIndex}\n//                                                         src={`data:image/png;base64,${optImage.image_data}`}\n//                                                         alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                                     />\n//                                                 </label>\n//                                             </li>\n//                                         ))}\n//                                     </ul>\n//                                 </div>\n//                             ))}\n\n//                             {/* <div className=\"flex-right\">\n//                                 <button className='clear-btn'>Mark for Review & Next</button>\n//                                 <button className='clear-btn' onClick={clearResponse}>Clear Response</button>\n//                                 <button className='previous-btn' onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\n//                                     <i class=\"fa-solid fa-angles-left\"></i>\n//                                     Previous\n//                                 </button>\n//                                 <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\n//                                     {activeQuestion === questions.length - 1 ? 'Submit' : 'Save & Next'}<i class=\"fa-solid fa-angles-right\"></i>\n//                                 </button>\n\n//                             </div> */}\n//                         </div>\n//                     {/* ) : ( */}\n//                         {/* <div className=\"result\"> */}\n//                             {/* <h3>Result</h3>\n//                             <p>\n//                                 Total Questions: <span>{questions.length}</span>\n//                             </p>\n//                             <p>\n//                                 Total Score:<span> {result.score}</span>\n//                                                          </p>\n//<p>\n//                                 Correct Answers:<span> {result.correctAnswers}</span>\n//                             </p>\n//                             <p>\n//                                 Wrong Answers:<span> {result.wrongAnswers}</span>\n//                             </p>\n//                             <p>\n//                                 Accuracy:<span> {accuracy}%</span>\n//                             </p>\n//                             <p>\n//                                 Average Score:<span> {averageScore}</span>\n//                             </p>\n//                             <p>\n//                                 Top Score:<span> {topScore}</span>\n//                             </p>\n//                             <p>\n//                                 Live Rank:<span> {liveRank}</span>\n//                             </p> */}\n//                         {/* </div> */}\n//                     {/* )} */}\n//                 </div>\n//             </div>\n//             {/* <div className='rightsidebar'><RightSidebar onQuestionSelect={handleQuestionSelect} answeredQuestions={answeredQuestions} /></div> */}\n//         </div>\n\n//     )\n// }\n\n// export default Paper\n\n// import React, { useEffect, useState } from 'react';\n// import './Paper.css';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader';\n\n// const Paper = () => {\n//     const [Qimages, setQImages] = useState([]);\n//     const [OPTimages, setOPTImages] = useState([]);\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n\n//         useEffect(() => {\n//             // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n//             const fetchQImages = async () => {\n//                 let fetchedQImages = [];\n\n//                 for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                     try {\n//                         const response = await fetch(`http://localhost:7000/images/${i}`);\n//                         const data = await response.json();\n//                         if (data.length > 0) {\n//                             fetchedQImages.push(data[0]); // Add only the first image from each set\n//                         }\n//                     } catch (error) {\n//                         console.error('Error fetching Qimages:', error);\n//                     }\n//                 }\n\n//                 setQImages(fetchedQImages);\n//             };\n\n//             // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n//             const fetchOPTImages = async () => {\n//                 let fetchedOPTImages = [];\n\n//                 for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                     try {\n//                         for (let j = i + 1; j <= i + 4; j++) {\n//                             const response = await fetch(`http://localhost:7000/images/${j}`);\n//                             const data = await response.json();\n//                             if (data.length > 0) {\n//                                 fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n//                             }\n//                         }\n//                     } catch (error) {\n//                         console.error('Error fetching OPTimages:', error);\n//                     }\n//                 }\n\n//                 setOPTImages(fetchedOPTImages);\n//             };\n\n//             fetchQImages();\n//             fetchOPTImages();\n//         }, []); // Empty dependency array to fetch data only once when the component mounts\n\n//     const handleNextClick = () => {\n//         // Move to the next question when the \"Next\" button is clicked\n//         setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n//     };\n\n//     return (\n//         <div className='main'>\n//             {/* ... */}\n//             <div><PaperHeader /></div>\n//             <div className='options-container'>\n//                 {/* Display only the current question and its options */}\n//                 <h2 className='question'>\n//                     <img\n//                         src={`data:image/png;base64,${Qimages[currentQuestionIndex].image_data}`}\n//                         alt={`QImage ${currentQuestionIndex + 1}`}\n//                     />\n//                 </h2>\n//                 <ul className='options-container'>\n//                     {OPTimages\n//                         .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\n//                         .map((optImage, optIndex) => (\n//                             <li key={optIndex}>\n//                                 <input type=\"radio\" />\n//                                 <label className='alpha-index'>\n//                                     <img\n//                                         src={`data:image/png;base64,${optImage.image_data}`}\n//                                         alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                     />\n//                                 </label>\n//                             </li>\n//                         ))}\n//                 </ul>\n//                 <button onClick={handleNextClick}>Next</button>\n//             </div>\n//             {/* ... */}\n//         </div>\n//     );\n// };\n\n// export default Paper;\n\nimport React, { useEffect, useState } from 'react';\nimport './Paper.css';\nimport PaperHeader from '../../Components/PaperHeader/PaperHeader';\n// import { Waveform } from '@uiball/loaders'\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Paper = () => {\n  _s();\n  const [Qimages, setQImages] = useState([]);\n  const [OPTimages, setOPTImages] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  useEffect(() => {\n    // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n    const fetchQImages = async () => {\n      let fetchedQImages = [];\n      for (let i = 1; i <= 20000; i += 6) {\n        // Assuming there are 100 sets of images\n        try {\n          const response = await fetch(`http://localhost:7001/images/${i}`);\n          const data = await response.json();\n          if (data.length > 0) {\n            fetchedQImages.push(data[0]); // Add only the first image from each set\n          }\n        } catch (error) {\n          console.error('Error fetching Qimages:', error);\n        }\n      }\n      setQImages(fetchedQImages);\n    };\n\n    // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n    const fetchOPTImages = async () => {\n      let fetchedOPTImages = [];\n      for (let i = 1; i <= 20000; i += 6) {\n        // Assuming there are 100 sets of images\n        try {\n          for (let j = i + 1; j <= i + 4; j++) {\n            const response = await fetch(`http://localhost:7001/images/${j}`);\n            const data = await response.json();\n            if (data.length > 0) {\n              fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n            }\n          }\n        } catch (error) {\n          console.error('Error fetching OPTimages:', error);\n        }\n      }\n      setOPTImages(fetchedOPTImages);\n    };\n    fetchQImages();\n    fetchOPTImages();\n  }, []); // Empty dependency array to fetch data only once when the component mounts\n\n  const handleNextClick = () => {\n    // Move to the next question when the \"Next\" button is clicked\n    setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n  };\n\n  // Check if Qimages[currentQuestionIndex] is defined before accessing its properties\n  const currentQuestion = Qimages[currentQuestionIndex];\n  const questionImageSrc = currentQuestion ? `data:image/png;base64,${currentQuestion.image_data}` : '';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sub-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(PaperHeader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 801,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 801,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quiz-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"options-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"question\",\n            children: currentQuestion ? /*#__PURE__*/_jsxDEV(\"img\", {\n              src: questionImageSrc,\n              alt: `QImage ${currentQuestionIndex + 1}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 806,\n              columnNumber: 33\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Loading question...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 811,\n              columnNumber: 33\n            }, this)\n\n            // <Waveform\n            //     size={40}\n            //     lineWeight={3.5}\n            //     speed={1}\n            //     color=\"black\"\n            // />\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 804,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 822,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"options-container\",\n            children: OPTimages.slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4).map((optImage, optIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"radio\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 830,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"alpha-index\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: `data:image/png;base64,${optImage.image_data}`,\n                  alt: `OPTImage ${optIndex + 2}-${optIndex + 5}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 832,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 831,\n                columnNumber: 41\n              }, this)]\n            }, optIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 829,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 823,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleNextClick,\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 840,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 803,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 802,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 800,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 799,\n    columnNumber: 9\n  }, this);\n};\n_s(Paper, \"eCwcjw3TPd8wJcOCQ4cMdpQ0YLo=\");\n_c = Paper;\nexport default Paper;\nvar _c;\n$RefreshReg$(_c, \"Paper\");","map":{"version":3,"names":["React","useEffect","useState","PaperHeader","jsxDEV","_jsxDEV","Paper","_s","Qimages","setQImages","OPTimages","setOPTImages","currentQuestionIndex","setCurrentQuestionIndex","fetchQImages","fetchedQImages","i","response","fetch","data","json","length","push","error","console","fetchOPTImages","fetchedOPTImages","j","handleNextClick","prevIndex","currentQuestion","questionImageSrc","image_data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","slice","map","optImage","optIndex","type","onClick","_c","$RefreshReg$"],"sources":["C:/Users/USER/Desktop/projectH/Latest-Quiz-App/quiz_app/front-end/src/Pages/Paper/Paper.jsx"],"sourcesContent":["// test commit\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import quiz from '../../Data/quesAns'\r\n// import './Paper.css'\r\n// import RightSidebar from '../../Components/RightSidebar/RightSidebar';\r\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader'\r\n\r\n\r\n// // Defining Timer code \r\n// const formatTime = (time) => {\r\n//     let minutes = Math.floor(time / 60);\r\n//     let seconds = Math.floor(time - minutes * 60);\r\n\r\n//     if (minutes < 10) minutes = '0' + minutes;\r\n//     if (seconds < 10) seconds = '0' + seconds;\r\n//     return minutes + ':' + seconds;\r\n// }; // End of Defining Timer code \r\n\r\n\r\n\r\n// const Paper = ({ seconds, answeredQuestions }) => {\r\n\r\n//     const [activeQuestion, setActiveQuestion] = useState(0);\r\n//     const handleQuestionSelect = (questionNumber) => {\r\n//         setActiveQuestion(questionNumber - 1);\r\n//     }\r\n\r\n//     // const [questionStatus, setQuestionStatus] = useState(Array(30).fill('notAnswered'))\r\n//     // const [activeQuestion, setActiveQuestion] = useState(0)\r\n//     // const [selectedAnswer, setSelectedAnswer] = useState('') \r\n\r\n//     const [selectedAnswers, setSelectedAnswers] = useState(new Array(quiz.questions.length).fill(''));\r\n//     const [showResult, setShowResult] = useState(false)\r\n//     const [result, setResult] = useState({\r\n//         score: 0,\r\n//         correctAnswers: 0,\r\n//         wrongAnswers: 0,\r\n//     })\r\n\r\n\r\n\r\n//     const { questions } = quiz\r\n//     const { question, choices, correctAnswer } = questions[activeQuestion]\r\n//     const onClickNext = () => {\r\n//         setResult((prev) =>\r\n//             selectedAnswers[activeQuestion] === correctAnswer\r\n//                 ? {\r\n//                     ...prev,\r\n//                     score: prev.score + 5,\r\n//                     correctAnswers: prev.correctAnswers + 1,\r\n//                 }\r\n//                 : { ...prev, wrongAnswers: prev.wrongAnswers + 1 }\r\n//         );\r\n//         if (activeQuestion !== questions.length - 1) {\r\n//             setActiveQuestion((prev) => prev + 1);\r\n//         } else {\r\n//             // setActiveQuestion(0);\r\n//             setShowResult(true);\r\n//             calculateResult();//new added code\r\n//         }\r\n//     };\r\n\r\n\r\n//     const onAnswerSelected = (OptionLetter) => {\r\n//         // Update the selected answer for the current question\r\n//         const updatedSelectedAnswers = [...selectedAnswers];\r\n//         updatedSelectedAnswers[activeQuestion] = OptionLetter;\r\n//         setSelectedAnswers(updatedSelectedAnswers);\r\n//         // setSelectedAnswers(updatedSelectedAnswers, OptionLetter);\r\n\r\n//     };\r\n\r\n\r\n\r\n//     const clearResponse = () => {\r\n//         // Clear the response for the current question\r\n//         const updatedSelectedAnswers = [...selectedAnswers];\r\n//         updatedSelectedAnswers[activeQuestion] = '';\r\n//         setSelectedAnswers(updatedSelectedAnswers);\r\n//     };\r\n\r\n//     const goToPreviousQuestion = () => {\r\n//         // Move to the previous question\r\n//         if (activeQuestion > 0) {\r\n//             setActiveQuestion((prev) => prev - 1);\r\n//         }\r\n//     };\r\n\r\n\r\n\r\n//     const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\r\n//     const [countdown, setCountDown] = useState(seconds);\r\n//     useEffect(() => {\r\n//         const timerId = setInterval(() => {\r\n//             setCountDown((prevCountDown) =>\r\n//                 prevCountDown - 1\r\n//             );\r\n//         }, 1000)\r\n//         return () => {\r\n//             clearInterval(timerId);\r\n//         };\r\n//     }, [])\r\n\r\n//     useEffect(() => {\r\n//         if (countdown <= 0) {\r\n//             setShowResult(true);\r\n//             // clearInterval(timerId.current);\r\n//             // alert(\"End\");\r\n//         }\r\n//     }, [countdown]);\r\n\r\n\r\n//    // NEW ADDED CODE\r\n\r\n//     // const [showResult, setShowResult] = useState(false);\r\n//     const [accuracy, setAccuracy] = useState(0);\r\n//     const [averageScore, setAverageScore] = useState(0);\r\n//     const [topScore, setTopScore] = useState(0);\r\n//     const [liveRank, setLiveRank] = useState(0);\r\n\r\n//     const calculateResult = () => {\r\n//         // Calculate accuracy\r\n//         const totalAttempted = answeredQuestions.length;\r\n//         const totalCorrect = result.correctAnswers;\r\n//         const calculatedAccuracy = (totalCorrect / totalAttempted) * 100;\r\n//         setAccuracy(calculatedAccuracy.toFixed(2));\r\n\r\n//         // Calculate average score\r\n//         const calculatedAverageScore = result.score / totalAttempted;\r\n//         setAverageScore(calculatedAverageScore.toFixed(2));\r\n\r\n//         // Placeholder for live ranking data - Replace this with actual data\r\n//         const calculatedTopScore = 100;\r\n//         const calculatedLiveRank = 1;\r\n\r\n//         setTopScore(calculatedTopScore);\r\n//         setLiveRank(calculatedLiveRank);\r\n//     };\r\n\r\n//     // const onClickSubmit = () => {\r\n//     //     calculateResult();\r\n//     //     setShowResult(true);\r\n//     // };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//     return (\r\n\r\n//         <div className='main'>\r\n//             <div className='sub-main'>\r\n//                 <div><PaperHeader /></div>\r\n//                 <div className=\"quiz-container\">\r\n//                     {!showResult ? (\r\n//                         <div>\r\n//                             <div className='subjects'>\r\n//                                 <button className='subject-btn'>Mathematics</button>\r\n//                                 <button className='subject-btn'>Physics</button>\r\n//                                 <button className='subject-btn'>Chemistry</button>\r\n//                             </div>\r\n//                             <div className='second-header'>\r\n//                                 <div className='single-select-question'>\r\n//                                     Single Select Question\r\n//                                 </div>\r\n//                                 <div className='right-header'>\r\n//                                     <div className='marks'>\r\n//                                         Marks: <div className='plus-mark'>+1</div>\r\n//                                         <div className='minus-mark'>-1</div>\r\n//                                     </div>\r\n//                                     <div className='timer'>\r\n//                                         <h3>Time Left: {formatTime(countdown)}</h3>\r\n//                                     </div>\r\n//                                 </div>\r\n//                             </div>\r\n//                             <div className='question-no'>\r\n//                                 <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\r\n//                                 <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\r\n//                             </div>\r\n\r\n//                             <h2 className='question'><img src={question} alt=\"question\" /></h2>\r\n\r\n//                             <ul className='options-container'>\r\n//                                 {choices.map((answer, index) => (\r\n//                                     <li key={answer}>\r\n//                                         <input type=\"radio\"\r\n//                                             // id={answer}\r\n//                                             id={`option-${index}`}\r\n//                                             name='answer'\r\n//                                             value={answer}\r\n//                                             checked={selectedAnswers[activeQuestion] === answer}\r\n//                                             onChange={() => onAnswerSelected(answer)} />\r\n\r\n\r\n//                                         <label className='alpha-index' htmlFor={`option-${index}`}>\r\n//                                             {/* htmlFor={answer} */}\r\n//                                             {String.fromCharCode(65 + index)}.\r\n//                                             <img src={answer} alt=\"answer\" />\r\n//                                         </label>\r\n//                                     </li>\r\n//                                 ))}\r\n//                             </ul>\r\n\r\n//                             <div className=\"flex-right\">\r\n//                                 <button className='clear-btn'>Mark for Review & Next</button>\r\n//                                 <button className='clear-btn' onClick={clearResponse}>Clear Response</button>\r\n//                                 <button className='previous-btn' onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\r\n//                                     <i class=\"fa-solid fa-angles-left\"></i>\r\n//                                     Previous\r\n//                                 </button>\r\n//                                 <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\r\n//                                     {activeQuestion === questions.length - 1 ? 'Submit' : 'Save & Next'}<i class=\"fa-solid fa-angles-right\"></i>\r\n//                                 </button>\r\n\r\n//                             </div>\r\n//                         </div>\r\n//                     ) : (\r\n//                         <div className=\"result\">\r\n//                             <h3>Result</h3>\r\n//                             <p>\r\n//                                 Total Questions: <span>{questions.length}</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Total Score:<span> {result.score}</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Correct Answers:<span> {result.correctAnswers}</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Wrong Answers:<span> {result.wrongAnswers}</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Accuracy:<span> {accuracy}%</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Average Score:<span> {averageScore}</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Top Score:<span> {topScore}</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Live Rank:<span> {liveRank}</span>\r\n//                             </p>\r\n//                         </div>\r\n//                     )}\r\n//                 </div>\r\n//             </div>\r\n//             <div className='rightsidebar'><RightSidebar onQuestionSelect={handleQuestionSelect} answeredQuestions={answeredQuestions} /></div>\r\n//         </div>\r\n\r\n\r\n//     )\r\n// }\r\n\r\n// export default Paper\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// // import quiz from '../../Data/quesAns'\r\n// import './Paper.css'\r\n// // import RightSidebar from '../../Components/RightSidebar/RightSidebar';\r\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader'\r\n\r\n\r\n// // Defining Timer code \r\n// // const formatTime = (time) => {\r\n// //     let minutes = Math.floor(time / 60);\r\n// //     let seconds = Math.floor(time - minutes * 60);\r\n\r\n// //     if (minutes < 10) minutes = '0' + minutes;\r\n// //     if (seconds < 10) seconds = '0' + seconds;\r\n// //     return minutes + ':' + seconds;\r\n// // }; // End of Defining Timer code \r\n\r\n\r\n\r\n// const Paper = () => {\r\n\r\n//     // const [activeQuestion, setActiveQuestion] = useState(0);\r\n//     // const handleQuestionSelect = (questionNumber) => {\r\n//     //     setActiveQuestion(questionNumber - 1);\r\n//     // }\r\n\r\n//     // const [questionStatus, setQuestionStatus] = useState(Array(30).fill('notAnswered'))\r\n//     // const [activeQuestion, setActiveQuestion] = useState(0)\r\n//     // const [selectedAnswer, setSelectedAnswer] = useState('') \r\n\r\n//     // const [selectedAnswers, setSelectedAnswers] = useState(new Array(quiz.questions.length).fill(''));\r\n//     // const [showResult, setShowResult] = useState(false)\r\n//     // const [result, setResult] = useState({\r\n//     //     score: 0,\r\n//     //     correctAnswers: 0,\r\n//     //     wrongAnswers: 0,\r\n//     // })\r\n\r\n   \r\n\r\n//     // const { questions } = quiz\r\n//     // const { Qimages, OPTimages, correctAnswer } = [activeQuestion]\r\n//     // const onClickNext = () => {\r\n//     //     setResult((prev) =>\r\n//     //         selectedAnswers[activeQuestion] === correctAnswer\r\n//     //             ? {\r\n//     //                 ...prev,\r\n//     //                 score: prev.score + 5,\r\n//     //                 correctAnswers: prev.correctAnswers + 1,\r\n//     //             }\r\n//     //             : { ...prev, wrongAnswers: prev.wrongAnswers + 1 }\r\n//     //     );\r\n//     //     if (activeQuestion !== questions.length - 1) {\r\n//     //         setActiveQuestion((prev) => prev + 1);\r\n//     //     } else {\r\n//     //         // setActiveQuestion(0);\r\n//     //         setShowResult(true);\r\n//     //         calculateResult();//new added code\r\n//     //     }\r\n//     // };\r\n\r\n\r\n//     // const onAnswerSelected = (OptionLetter) => {\r\n//     //     // Update the selected answer for the current question\r\n//     //     const updatedSelectedAnswers = [...selectedAnswers];\r\n//     //     updatedSelectedAnswers[activeQuestion] = OptionLetter;\r\n//     //     setSelectedAnswers(updatedSelectedAnswers);\r\n//     //     // setSelectedAnswers(updatedSelectedAnswers, OptionLetter);\r\n\r\n//     // };\r\n\r\n\r\n\r\n//     // const clearResponse = () => {\r\n//     //     // Clear the response for the current question\r\n//     //     const updatedSelectedAnswers = [...selectedAnswers];\r\n//     //     updatedSelectedAnswers[activeQuestion] = '';\r\n//     //     setSelectedAnswers(updatedSelectedAnswers);\r\n//     // };\r\n\r\n//     // const goToPreviousQuestion = () => {\r\n//     //     // Move to the previous question\r\n//     //     if (activeQuestion > 0) {\r\n//     //         setActiveQuestion((prev) => prev - 1);\r\n//     //     }\r\n//     // };\r\n\r\n\r\n\r\n//     // const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\r\n//     // const [countdown, setCountDown] = useState(seconds);\r\n//     // useEffect(() => {\r\n//     //     const timerId = setInterval(() => {\r\n//     //         setCountDown((prevCountDown) =>\r\n//     //             prevCountDown - 1\r\n//     //         );\r\n//     //     }, 1000)\r\n//     //     return () => {\r\n//     //         clearInterval(timerId);\r\n//     //     };\r\n//     // }, [])\r\n\r\n//     // useEffect(() => {\r\n//     //     if (countdown <= 0) {\r\n//     //         setShowResult(true);\r\n//     //         // clearInterval(timerId.current);\r\n//     //         // alert(\"End\");\r\n//     //     }\r\n//     // }, [countdown]);\r\n\r\n\r\n//     // NEW ADDED CODE\r\n\r\n//     // const [showResult, setShowResult] = useState(false);\r\n//     // const [accuracy, setAccuracy] = useState(0);\r\n//     // const [averageScore, setAverageScore] = useState(0);\r\n//     // const [topScore, setTopScore] = useState(0);\r\n//     // const [liveRank, setLiveRank] = useState(0);\r\n\r\n//     // const calculateResult = () => {\r\n//     //     // Calculate accuracy\r\n//     //     const totalAttempted = answeredQuestions.length;\r\n//     //     const totalCorrect = result.correctAnswers;\r\n//     //     const calculatedAccuracy = (totalCorrect / totalAttempted) * 100;\r\n//     //     setAccuracy(calculatedAccuracy.toFixed(2));\r\n\r\n//     //     // Calculate average score\r\n//     //     const calculatedAverageScore = result.score / totalAttempted;\r\n//     //     setAverageScore(calculatedAverageScore.toFixed(2));\r\n\r\n//     //     // Placeholder for live ranking data - Replace this with actual data\r\n//     //     const calculatedTopScore = 100;\r\n//     //     const calculatedLiveRank = 1;\r\n\r\n//     //     setTopScore(calculatedTopScore);\r\n//     //     setLiveRank(calculatedLiveRank);\r\n//     // };\r\n\r\n//     // const onClickSubmit = () => {\r\n//     //     calculateResult();\r\n//     //     setShowResult(true);\r\n//     // };\r\n\r\n\r\n//     const [Qimages,setQImages] = useState([]);\r\n//     const [OPTimages,setOPTImages] = useState([]);\r\n\r\n//     useEffect(() => {\r\n//         // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\r\n//         const fetchQImages = async () => {\r\n//             let fetchedQImages = [];\r\n\r\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\r\n//                 try {\r\n//                     const response = await fetch(`http://localhost:7000/images/${i}`);\r\n//                     const data = await response.json();\r\n//                     if (data.length > 0) {\r\n//                         fetchedQImages.push(data[0]); // Add only the first image from each set\r\n//                     }\r\n//                 } catch (error) {\r\n//                     console.error('Error fetching Qimages:', error);\r\n//                 }\r\n//             }\r\n\r\n//             setQImages(fetchedQImages);\r\n//         };\r\n\r\n//         // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\r\n//         const fetchOPTImages = async () => {\r\n//             let fetchedOPTImages = [];\r\n\r\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\r\n//                 try {\r\n//                     for (let j = i + 1; j <= i + 4; j++) {\r\n//                         const response = await fetch(`http://localhost:7000/images/${j}`);\r\n//                         const data = await response.json();\r\n//                         if (data.length > 0) {\r\n//                             fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\r\n//                         }\r\n//                     }\r\n//                 } catch (error) {\r\n//                     console.error('Error fetching OPTimages:', error);\r\n//                 }\r\n//             }\r\n\r\n//             setOPTImages(fetchedOPTImages);\r\n//         };\r\n\r\n//         fetchQImages();\r\n//         fetchOPTImages();\r\n//     }, []); // Empty dependency array to fetch data only once when the component mounts\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//     return (\r\n\r\n//         <div className='main'>\r\n//             <div className='sub-main'>\r\n//                 <div><PaperHeader /></div>\r\n//                 <div className=\"quiz-container\">\r\n//                     {/* {!showResult ? ( */}\r\n//                         <div>\r\n//                             <div className='subjects'>\r\n//                                 <button className='subject-btn'>Mathematics</button>\r\n//                                 <button className='subject-btn'>Physics</button>\r\n//                                 <button className='subject-btn'>Chemistry</button>\r\n//                             </div>\r\n//                             <div className='second-header'>\r\n//                                 <div className='single-select-question'>\r\n//                                     Single Select Question\r\n//                                 </div>\r\n//                                 {/* <div className='right-header'>\r\n//                                     <div className='marks'>\r\n//                                         Marks: <div className='plus-mark'>+1</div>\r\n//                                         <div className='minus-mark'>-1</div>\r\n//                                     </div>\r\n//                                     <div className='timer'>\r\n//                                         <h3>Time Left: {formatTime(countdown)}</h3>\r\n//                                     </div>\r\n//                                 </div> */}\r\n//                             </div>\r\n//                             {/* <div className='question-no'>\r\n//                                 <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\r\n//                                 <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\r\n//                             </div> */}\r\n\r\n                           \r\n\r\n\r\n\r\n//                             {Qimages.map((qImage, index) => (\r\n//                                 <div key={index}>\r\n//                                     {/* <h2>QImage {index + 1}</h2> */}\r\n//                                     {/* <div className='question-no'>\r\n//                                         <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\r\n//                                         <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\r\n//                                     </div> */}\r\n//                                     <h2 className='question'> <img\r\n//                                         src={`data:image/png;base64,${qImage.image_data}`}\r\n//                                         alt={`QImage ${index + 1}`}\r\n//                                     /></h2>\r\n                              \r\n//                                     <ul className='options-container'>\r\n//                                         {OPTimages.slice(index * 4, index * 4 + 4).map((optImage, optIndex) => (\r\n//                                             <li>\r\n//                                                 <input type=\"radio\"\r\n//                                                 // // id={answer}\r\n//                                                 //     id={`option-${index}`}\r\n//                                                 //     name='answer'\r\n//                                                 //     value={optImage}\r\n//                                                 //     checked={selectedAnswers[activeQuestion] === optImage}\r\n//                                                 //     onChange={() => onAnswerSelected(optImage)} \r\n//                                                 />\r\n\r\n\r\n//                                                 <label className='alpha-index' >\r\n//                                                     <img\r\n//                                                         key={optIndex}\r\n//                                                         src={`data:image/png;base64,${optImage.image_data}`}\r\n//                                                         alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\r\n//                                                     />\r\n//                                                 </label>\r\n//                                             </li>\r\n//                                         ))}\r\n//                                     </ul>\r\n//                                 </div>\r\n//                             ))}\r\n\r\n\r\n\r\n//                             {/* <div className=\"flex-right\">\r\n//                                 <button className='clear-btn'>Mark for Review & Next</button>\r\n//                                 <button className='clear-btn' onClick={clearResponse}>Clear Response</button>\r\n//                                 <button className='previous-btn' onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\r\n//                                     <i class=\"fa-solid fa-angles-left\"></i>\r\n//                                     Previous\r\n//                                 </button>\r\n//                                 <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\r\n//                                     {activeQuestion === questions.length - 1 ? 'Submit' : 'Save & Next'}<i class=\"fa-solid fa-angles-right\"></i>\r\n//                                 </button>\r\n\r\n//                             </div> */}\r\n//                         </div>\r\n//                     {/* ) : ( */}\r\n//                         {/* <div className=\"result\"> */}\r\n//                             {/* <h3>Result</h3>\r\n//                             <p>\r\n//                                 Total Questions: <span>{questions.length}</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Total Score:<span> {result.score}</span>\r\n//                                                          </p>\r\n//<p>\r\n//                                 Correct Answers:<span> {result.correctAnswers}</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Wrong Answers:<span> {result.wrongAnswers}</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Accuracy:<span> {accuracy}%</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Average Score:<span> {averageScore}</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Top Score:<span> {topScore}</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Live Rank:<span> {liveRank}</span>\r\n//                             </p> */}\r\n//                         {/* </div> */}\r\n//                     {/* )} */}\r\n//                 </div>\r\n//             </div>\r\n//             {/* <div className='rightsidebar'><RightSidebar onQuestionSelect={handleQuestionSelect} answeredQuestions={answeredQuestions} /></div> */}\r\n//         </div>\r\n\r\n\r\n//     )\r\n// }\r\n\r\n// export default Paper\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import './Paper.css';\r\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader';\r\n\r\n// const Paper = () => {\r\n//     const [Qimages, setQImages] = useState([]);\r\n//     const [OPTimages, setOPTImages] = useState([]);\r\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n\r\n   \r\n\r\n//         useEffect(() => {\r\n//             // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\r\n//             const fetchQImages = async () => {\r\n//                 let fetchedQImages = [];\r\n\r\n//                 for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\r\n//                     try {\r\n//                         const response = await fetch(`http://localhost:7000/images/${i}`);\r\n//                         const data = await response.json();\r\n//                         if (data.length > 0) {\r\n//                             fetchedQImages.push(data[0]); // Add only the first image from each set\r\n//                         }\r\n//                     } catch (error) {\r\n//                         console.error('Error fetching Qimages:', error);\r\n//                     }\r\n//                 }\r\n\r\n//                 setQImages(fetchedQImages);\r\n//             };\r\n\r\n//             // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\r\n//             const fetchOPTImages = async () => {\r\n//                 let fetchedOPTImages = [];\r\n\r\n//                 for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\r\n//                     try {\r\n//                         for (let j = i + 1; j <= i + 4; j++) {\r\n//                             const response = await fetch(`http://localhost:7000/images/${j}`);\r\n//                             const data = await response.json();\r\n//                             if (data.length > 0) {\r\n//                                 fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\r\n//                             }\r\n//                         }\r\n//                     } catch (error) {\r\n//                         console.error('Error fetching OPTimages:', error);\r\n//                     }\r\n//                 }\r\n\r\n//                 setOPTImages(fetchedOPTImages);\r\n//             };\r\n\r\n//             fetchQImages();\r\n//             fetchOPTImages();\r\n//         }, []); // Empty dependency array to fetch data only once when the component mounts\r\n\r\n\r\n   \r\n\r\n//     const handleNextClick = () => {\r\n//         // Move to the next question when the \"Next\" button is clicked\r\n//         setCurrentQuestionIndex(prevIndex => prevIndex + 1);\r\n//     };\r\n\r\n//     return (\r\n//         <div className='main'>\r\n//             {/* ... */}\r\n//             <div><PaperHeader /></div>\r\n//             <div className='options-container'>\r\n//                 {/* Display only the current question and its options */}\r\n//                 <h2 className='question'>\r\n//                     <img\r\n//                         src={`data:image/png;base64,${Qimages[currentQuestionIndex].image_data}`}\r\n//                         alt={`QImage ${currentQuestionIndex + 1}`}\r\n//                     />\r\n//                 </h2>\r\n//                 <ul className='options-container'>\r\n//                     {OPTimages\r\n//                         .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\r\n//                         .map((optImage, optIndex) => (\r\n//                             <li key={optIndex}>\r\n//                                 <input type=\"radio\" />\r\n//                                 <label className='alpha-index'>\r\n//                                     <img\r\n//                                         src={`data:image/png;base64,${optImage.image_data}`}\r\n//                                         alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\r\n//                                     />\r\n//                                 </label>\r\n//                             </li>\r\n//                         ))}\r\n//                 </ul>\r\n//                 <button onClick={handleNextClick}>Next</button>\r\n//             </div>\r\n//             {/* ... */}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Paper;\r\n\r\n\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport './Paper.css';\r\nimport PaperHeader from '../../Components/PaperHeader/PaperHeader';\r\n// import { Waveform } from '@uiball/loaders'\r\n\r\n\r\n\r\n\r\nconst Paper = () => {\r\n\r\n    const [Qimages, setQImages] = useState([]);\r\n    const [OPTimages, setOPTImages] = useState([]);\r\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\r\n        const fetchQImages = async () => {\r\n            let fetchedQImages = [];\r\n\r\n            for (let i = 1; i <= 20000; i += 6) { // Assuming there are 100 sets of images\r\n                try {\r\n                    const response = await fetch(`http://localhost:7001/images/${i}`);\r\n                    const data = await response.json();\r\n                    if (data.length > 0) {\r\n                        fetchedQImages.push(data[0]); // Add only the first image from each set\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error fetching Qimages:', error);\r\n                }\r\n            }\r\n\r\n            setQImages(fetchedQImages);\r\n        };\r\n\r\n\r\n        // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\r\n        const fetchOPTImages = async () => {\r\n            let fetchedOPTImages = [];\r\n\r\n            for (let i = 1; i <= 20000; i += 6) { // Assuming there are 100 sets of images\r\n                try {\r\n                    for (let j = i + 1; j <= i + 4; j++) {\r\n                        const response = await fetch(`http://localhost:7001/images/${j}`);\r\n                        const data = await response.json();\r\n                        if (data.length > 0) {\r\n                            fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\r\n                        }\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error fetching OPTimages:', error);\r\n                }\r\n            }\r\n\r\n            setOPTImages(fetchedOPTImages);\r\n        };\r\n\r\n        fetchQImages();\r\n        fetchOPTImages();\r\n    }, []); // Empty dependency array to fetch data only once when the component mounts\r\n\r\n\r\n\r\n\r\n    const handleNextClick = () => {\r\n        // Move to the next question when the \"Next\" button is clicked\r\n        setCurrentQuestionIndex(prevIndex => prevIndex + 1);\r\n    };\r\n\r\n\r\n    // Check if Qimages[currentQuestionIndex] is defined before accessing its properties\r\n    const currentQuestion = Qimages[currentQuestionIndex];\r\n    const questionImageSrc = currentQuestion ? `data:image/png;base64,${currentQuestion.image_data}` : '';\r\n\r\n\r\n    return (\r\n        <div className='main'>\r\n            <div className='sub-main'>\r\n                <div><PaperHeader /></div>\r\n                <div className=\"quiz-container\">\r\n                    <div className='options-container'>\r\n                        <h2 className='question'>\r\n                            {currentQuestion ? (\r\n                                <img\r\n                                    src={questionImageSrc}\r\n                                    alt={`QImage ${currentQuestionIndex + 1}`}\r\n                                />\r\n                            ) : (\r\n                                <p>Loading question...</p>\r\n                                 \r\n\r\n                            // <Waveform\r\n                            //     size={40}\r\n                            //     lineWeight={3.5}\r\n                            //     speed={1}\r\n                            //     color=\"black\"\r\n                            // />\r\n                            )}\r\n                        </h2>\r\n                        <div></div>\r\n                        <ul className='options-container'>\r\n                            {/* ... (options rendering logic) */}\r\n                            {OPTimages\r\n                                .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\r\n                                .map((optImage, optIndex) => (\r\n                                    \r\n                                    <li key={optIndex}>\r\n                                        <input type=\"radio\" />\r\n                                        <label className='alpha-index'>\r\n                                            <img\r\n                                                src={`data:image/png;base64,${optImage.image_data}`}\r\n                                                alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\r\n                                            />\r\n                                        </label>\r\n                                    </li>\r\n                                ))}\r\n                        </ul>\r\n                        <button onClick={handleNextClick}>Next</button>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n\r\n           \r\n            \r\n            {/* ... */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Paper;"],"mappings":";;AAAA;;AAGA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAIA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAUA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;;AA+BA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAIA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AASA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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"},"metadata":{},"sourceType":"module","externalDependencies":[]}