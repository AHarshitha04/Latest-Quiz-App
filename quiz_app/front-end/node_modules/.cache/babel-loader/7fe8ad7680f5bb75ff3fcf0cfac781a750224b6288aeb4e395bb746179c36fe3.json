{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/Daily work/october/24-10-2023/1-1questions Quiz App/client/src/Pages/Paper/Paper.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import quiz from '../../Data/quesAns'\n// import './Paper.css'\n// import RightSidebar from '../../Components/RightSidebar/RightSidebar';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader'\n\n// // Defining Timer code \n// const formatTime = (time) => {\n//     let minutes = Math.floor(time / 60);\n//     let seconds = Math.floor(time - minutes * 60);\n\n//     if (minutes < 10) minutes = '0' + minutes;\n//     if (seconds < 10) seconds = '0' + seconds;\n//     return minutes + ':' + seconds;\n// }; // End of Defining Timer code \n\n// const Paper = ({ seconds, answeredQuestions }) => {\n\n//     const [activeQuestion, setActiveQuestion] = useState(0);\n//     const handleQuestionSelect = (questionNumber) => {\n//         setActiveQuestion(questionNumber - 1);\n//     }\n\n//     // const [questionStatus, setQuestionStatus] = useState(Array(30).fill('notAnswered'))\n//     // const [activeQuestion, setActiveQuestion] = useState(0)\n//     // const [selectedAnswer, setSelectedAnswer] = useState('') \n\n//     const [selectedAnswers, setSelectedAnswers] = useState(new Array(quiz.questions.length).fill(''));\n//     const [showResult, setShowResult] = useState(false)\n//     const [result, setResult] = useState({\n//         score: 0,\n//         correctAnswers: 0,\n//         wrongAnswers: 0,\n//     })\n\n//     const { questions } = quiz\n//     const { question, choices, correctAnswer } = questions[activeQuestion]\n//     const onClickNext = () => {\n//         setResult((prev) =>\n//             selectedAnswers[activeQuestion] === correctAnswer\n//                 ? {\n//                     ...prev,\n//                     score: prev.score + 5,\n//                     correctAnswers: prev.correctAnswers + 1,\n//                 }\n//                 : { ...prev, wrongAnswers: prev.wrongAnswers + 1 }\n//         );\n//         if (activeQuestion !== questions.length - 1) {\n//             setActiveQuestion((prev) => prev + 1);\n//         } else {\n//             // setActiveQuestion(0);\n//             setShowResult(true);\n//             calculateResult();//new added code\n//         }\n//     };\n\n//     const onAnswerSelected = (OptionLetter) => {\n//         // Update the selected answer for the current question\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = OptionLetter;\n//         setSelectedAnswers(updatedSelectedAnswers);\n//         // setSelectedAnswers(updatedSelectedAnswers, OptionLetter);\n\n//     };\n\n//     const clearResponse = () => {\n//         // Clear the response for the current question\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = '';\n//         setSelectedAnswers(updatedSelectedAnswers);\n//     };\n\n//     const goToPreviousQuestion = () => {\n//         // Move to the previous question\n//         if (activeQuestion > 0) {\n//             setActiveQuestion((prev) => prev - 1);\n//         }\n//     };\n\n//     const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\n//     const [countdown, setCountDown] = useState(seconds);\n//     useEffect(() => {\n//         const timerId = setInterval(() => {\n//             setCountDown((prevCountDown) =>\n//                 prevCountDown - 1\n//             );\n//         }, 1000)\n//         return () => {\n//             clearInterval(timerId);\n//         };\n//     }, [])\n\n//     useEffect(() => {\n//         if (countdown <= 0) {\n//             setShowResult(true);\n//             // clearInterval(timerId.current);\n//             // alert(\"End\");\n//         }\n//     }, [countdown]);\n\n//    // NEW ADDED CODE\n\n//     // const [showResult, setShowResult] = useState(false);\n//     const [accuracy, setAccuracy] = useState(0);\n//     const [averageScore, setAverageScore] = useState(0);\n//     const [topScore, setTopScore] = useState(0);\n//     const [liveRank, setLiveRank] = useState(0);\n\n//     const calculateResult = () => {\n//         // Calculate accuracy\n//         const totalAttempted = answeredQuestions.length;\n//         const totalCorrect = result.correctAnswers;\n//         const calculatedAccuracy = (totalCorrect / totalAttempted) * 100;\n//         setAccuracy(calculatedAccuracy.toFixed(2));\n\n//         // Calculate average score\n//         const calculatedAverageScore = result.score / totalAttempted;\n//         setAverageScore(calculatedAverageScore.toFixed(2));\n\n//         // Placeholder for live ranking data - Replace this with actual data\n//         const calculatedTopScore = 100;\n//         const calculatedLiveRank = 1;\n\n//         setTopScore(calculatedTopScore);\n//         setLiveRank(calculatedLiveRank);\n//     };\n\n//     // const onClickSubmit = () => {\n//     //     calculateResult();\n//     //     setShowResult(true);\n//     // };\n\n//     return (\n\n//         <div className='main'>\n//             <div className='sub-main'>\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     {!showResult ? (\n//                         <div>\n//                             <div className='subjects'>\n//                                 <button className='subject-btn'>Mathematics</button>\n//                                 <button className='subject-btn'>Physics</button>\n//                                 <button className='subject-btn'>Chemistry</button>\n//                             </div>\n//                             <div className='second-header'>\n//                                 <div className='single-select-question'>\n//                                     Single Select Question\n//                                 </div>\n//                                 <div className='right-header'>\n//                                     <div className='marks'>\n//                                         Marks: <div className='plus-mark'>+1</div>\n//                                         <div className='minus-mark'>-1</div>\n//                                     </div>\n//                                     <div className='timer'>\n//                                         <h3>Time Left: {formatTime(countdown)}</h3>\n//                                     </div>\n//                                 </div>\n//                             </div>\n//                             <div className='question-no'>\n//                                 <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\n//                                 <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\n//                             </div>\n\n//                             <h2 className='question'><img src={question} alt=\"question\" /></h2>\n\n//                             <ul className='options-container'>\n//                                 {choices.map((answer, index) => (\n//                                     <li key={answer}>\n//                                         <input type=\"radio\"\n//                                             // id={answer}\n//                                             id={`option-${index}`}\n//                                             name='answer'\n//                                             value={answer}\n//                                             checked={selectedAnswers[activeQuestion] === answer}\n//                                             onChange={() => onAnswerSelected(answer)} />\n\n//                                         <label className='alpha-index' htmlFor={`option-${index}`}>\n//                                             {/* htmlFor={answer} */}\n//                                             {String.fromCharCode(65 + index)}.\n//                                             <img src={answer} alt=\"answer\" />\n//                                         </label>\n//                                     </li>\n//                                 ))}\n//                             </ul>\n\n//                             <div className=\"flex-right\">\n//                                 <button className='clear-btn'>Mark for Review & Next</button>\n//                                 <button className='clear-btn' onClick={clearResponse}>Clear Response</button>\n//                                 <button className='previous-btn' onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\n//                                     <i class=\"fa-solid fa-angles-left\"></i>\n//                                     Previous\n//                                 </button>\n//                                 <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\n//                                     {activeQuestion === questions.length - 1 ? 'Submit' : 'Save & Next'}<i class=\"fa-solid fa-angles-right\"></i>\n//                                 </button>\n\n//                             </div>\n//                         </div>\n//                     ) : (\n//                         <div className=\"result\">\n//                             <h3>Result</h3>\n//                             <p>\n//                                 Total Questions: <span>{questions.length}</span>\n//                             </p>\n//                             <p>\n//                                 Total Score:<span> {result.score}</span>\n//                             </p>\n//                             <p>\n//                                 Correct Answers:<span> {result.correctAnswers}</span>\n//                             </p>\n//                             <p>\n//                                 Wrong Answers:<span> {result.wrongAnswers}</span>\n//                             </p>\n//                             <p>\n//                                 Accuracy:<span> {accuracy}%</span>\n//                             </p>\n//                             <p>\n//                                 Average Score:<span> {averageScore}</span>\n//                             </p>\n//                             <p>\n//                                 Top Score:<span> {topScore}</span>\n//                             </p>\n//                             <p>\n//                                 Live Rank:<span> {liveRank}</span>\n//                             </p>\n//                         </div>\n//                     )}\n//                 </div>\n//             </div>\n//             <div className='rightsidebar'><RightSidebar onQuestionSelect={handleQuestionSelect} answeredQuestions={answeredQuestions} /></div>\n//         </div>\n\n//     )\n// }\n\n// export default Paper\n\nimport React, { useEffect, useState } from 'react';\n// import quiz from '../../Data/quesAns'\nimport './Paper.css';\nimport RightSidebar from '../../Components/RightSidebar/RightSidebar';\nimport PaperHeader from '../../Components/PaperHeader/PaperHeader';\n\n// Defining Timer code \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formatTime = time => {\n  let minutes = Math.floor(time / 60);\n  let seconds = Math.floor(time - minutes * 60);\n  if (minutes < 10) minutes = '0' + minutes;\n  if (seconds < 10) seconds = '0' + seconds;\n  return minutes + ':' + seconds;\n}; // End of Defining Timer code \n\nconst Paper = ({\n  seconds,\n  answeredQuestions\n}) => {\n  _s();\n  // const [activeQuestion, setActiveQuestion] = useState(0);\n  // const handleQuestionSelect = (questionNumber) => {\n  //     setActiveQuestion(questionNumber - 1);\n  // }\n\n  // const [questionStatus, setQuestionStatus] = useState(Array(30).fill('notAnswered'))\n  // const [activeQuestion, setActiveQuestion] = useState(0)\n  // const [selectedAnswer, setSelectedAnswer] = useState('') \n\n  // const [selectedAnswers, setSelectedAnswers] = useState(new Array(quiz.questions.length).fill(''));\n  // const [showResult, setShowResult] = useState(false)\n  // const [result, setResult] = useState({\n  //     score: 0,\n  //     correctAnswers: 0,\n  //     wrongAnswers: 0,\n  // })\n\n  // const { questions } = quiz\n  // const { correctAnswer } = [activeQuestion]\n  const onClickNext = () => {\n    setResult(prev => selectedAnswers[activeQuestion] === correctAnswer ? {\n      ...prev,\n      score: prev.score + 5,\n      correctAnswers: prev.correctAnswers + 1\n    } : {\n      ...prev,\n      wrongAnswers: prev.wrongAnswers + 1\n    });\n    if (activeQuestion !== questions.length - 1) {\n      setActiveQuestion(prev => prev + 1);\n    } else {\n      // setActiveQuestion(0);\n      setShowResult(true);\n      calculateResult(); //new added code\n    }\n  };\n\n  // const onAnswerSelected = (OptionLetter) => {\n  //     // Update the selected answer for the current question\n  //     const updatedSelectedAnswers = [...selectedAnswers];\n  //     updatedSelectedAnswers[activeQuestion] = OptionLetter;\n  //     setSelectedAnswers(updatedSelectedAnswers);\n  //     // setSelectedAnswers(updatedSelectedAnswers, OptionLetter);\n\n  // };\n\n  // const clearResponse = () => {\n  //     // Clear the response for the current question\n  //     const updatedSelectedAnswers = [...selectedAnswers];\n  //     updatedSelectedAnswers[activeQuestion] = '';\n  //     setSelectedAnswers(updatedSelectedAnswers);\n  // };\n\n  // const goToPreviousQuestion = () => {\n  //     // Move to the previous question\n  //     if (activeQuestion > 0) {\n  //         setActiveQuestion((prev) => prev - 1);\n  //     }\n  // };\n\n  const addLeadingZero = number => number > 9 ? number : `0${number}`;\n  const [countdown, setCountDown] = useState(seconds);\n  useEffect(() => {\n    const timerId = setInterval(() => {\n      setCountDown(prevCountDown => prevCountDown - 1);\n    }, 1000);\n    return () => {\n      clearInterval(timerId);\n    };\n  }, []);\n  useEffect(() => {\n    if (countdown <= 0) {\n      setShowResult(true);\n      // clearInterval(timerId.current);\n      // alert(\"End\");\n    }\n  }, [countdown]);\n\n  // NEW ADDED CODE\n\n  // const [showResult, setShowResult] = useState(false);\n  // const [accuracy, setAccuracy] = useState(0);\n  // const [averageScore, setAverageScore] = useState(0);\n  // const [topScore, setTopScore] = useState(0);\n  // const [liveRank, setLiveRank] = useState(0);\n\n  // const calculateResult = () => {\n  //     // Calculate accuracy\n  //     const totalAttempted = answeredQuestions.length;\n  //     const totalCorrect = result.correctAnswers;\n  //     const calculatedAccuracy = (totalCorrect / totalAttempted) * 100;\n  //     setAccuracy(calculatedAccuracy.toFixed(2));\n\n  //     // Calculate average score\n  //     const calculatedAverageScore = result.score / totalAttempted;\n  //     setAverageScore(calculatedAverageScore.toFixed(2));\n\n  //     // Placeholder for live ranking data - Replace this with actual data\n  //     const calculatedTopScore = 100;\n  //     const calculatedLiveRank = 1;\n\n  //     setTopScore(calculatedTopScore);\n  //     setLiveRank(calculatedLiveRank);\n  // };\n\n  // const onClickSubmit = () => {\n  //     calculateResult();\n  //     setShowResult(true);\n  // };\n\n  const [Qimages, setQImages] = useState([]);\n  const [OPTimages, setOPTImages] = useState([]);\n  useEffect(() => {\n    // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n    const fetchQImages = async () => {\n      let fetchedQImages = [];\n      for (let i = 1; i <= 1000; i += 6) {\n        // Assuming there are 100 sets of images\n        try {\n          const response = await fetch(`http://localhost:7000/images/${i}`);\n          const data = await response.json();\n          if (data.length > 0) {\n            fetchedQImages.push(data[0]); // Add only the first image from each set\n          }\n        } catch (error) {\n          console.error('Error fetching Qimages:', error);\n        }\n      }\n      setQImages(fetchedQImages);\n    };\n\n    // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n    const fetchOPTImages = async () => {\n      let fetchedOPTImages = [];\n      for (let i = 1; i <= 1000; i += 6) {\n        // Assuming there are 100 sets of images\n        try {\n          for (let j = i + 1; j <= i + 4; j++) {\n            const response = await fetch(`http://localhost:7000/images/${j}`);\n            const data = await response.json();\n            if (data.length > 0) {\n              fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n            }\n          }\n        } catch (error) {\n          console.error('Error fetching OPTimages:', error);\n        }\n      }\n      setOPTImages(fetchedOPTImages);\n    };\n    fetchQImages();\n    fetchOPTImages();\n  }, []); // Empty dependency array to fetch data only once when the component mounts\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sub-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(PaperHeader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quiz-container\",\n        children: !showResult ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"subjects\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"subject-btn\",\n              children: \"Mathematics\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 470,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"subject-btn\",\n              children: \"Physics\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 471,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"subject-btn\",\n              children: \"Chemistry\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"second-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"single-select-question\",\n              children: \"Single Select Question\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 475,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"right-header\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"marks\",\n                children: [\"Marks: \", /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"plus-mark\",\n                  children: \"+1\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 480,\n                  columnNumber: 48\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"minus-mark\",\n                  children: \"-1\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 481,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 479,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"timer\",\n                children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: [\"Time Left: \", formatTime(countdown)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 484,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 483,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 478,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"question-no\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"active-question-no\",\n              children: [\"Question No. \", addLeadingZero(activeQuestion + 1)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 489,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"total-question\",\n              children: [\" of \", addLeadingZero(questions.length)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 490,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 29\n          }, this), Qimages.map((qImage, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"question-no\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"active-question-no\",\n                children: [\"Question No. \", addLeadingZero(activeQuestion + 1)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 501,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"total-question\",\n                children: [\" of \", addLeadingZero(questions.length)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 502,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 500,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"question\",\n              children: [\" \", /*#__PURE__*/_jsxDEV(\"img\", {\n                src: `data:image/png;base64,${qImage.image_data}`,\n                alt: `QImage ${index + 1}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 504,\n                columnNumber: 63\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 504,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"options-container\",\n              children: OPTimages.slice(index * 4, index * 4 + 4).map((optImage, optIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"radio\"\n                  // // id={answer}\n                  //     id={`option-${index}`}\n                  //     name='answer'\n                  //     value={optImage}\n                  //     checked={selectedAnswers[activeQuestion] === optImage}\n                  //     onChange={() => onAnswerSelected(optImage)} \n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 512,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"alpha-index\",\n                  htmlFor: `option-${index}`,\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: `data:image/png;base64,${optImage.image_data}`,\n                    alt: `OPTImage ${optIndex + 2}-${optIndex + 5}`\n                  }, optIndex, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 523,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 522,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 511,\n                columnNumber: 45\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 509,\n              columnNumber: 37\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 498,\n            columnNumber: 33\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex-right\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"clear-btn\",\n              children: \"Mark for Review & Next\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 538,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"clear-btn\",\n              onClick: clearResponse,\n              children: \"Clear Response\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 539,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"previous-btn\",\n              onClick: goToPreviousQuestion,\n              disabled: activeQuestion === 0,\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                class: \"fa-solid fa-angles-left\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 541,\n                columnNumber: 37\n              }, this), \"Previous\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 540,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"save-btn\",\n              onClick: onClickNext,\n              disabled: !selectedAnswers[activeQuestion],\n              children: [activeQuestion === questions.length - 1 ? 'Submit' : 'Save & Next', /*#__PURE__*/_jsxDEV(\"i\", {\n                class: \"fa-solid fa-angles-right\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 545,\n                columnNumber: 105\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 544,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 537,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Result\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Total Questions: \", /*#__PURE__*/_jsxDEV(\"span\", {\n              children: questions.length\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 554,\n              columnNumber: 50\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 553,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Total Score:\", /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\" \", result.score]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 557,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 556,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Correct Answers:\", /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\" \", result.correctAnswers]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 560,\n              columnNumber: 49\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 559,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Wrong Answers:\", /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\" \", result.wrongAnswers]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 563,\n              columnNumber: 47\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 562,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Accuracy:\", /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\" \", accuracy, \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 566,\n              columnNumber: 42\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 565,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Average Score:\", /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\" \", averageScore]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 569,\n              columnNumber: 47\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 568,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Top Score:\", /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\" \", topScore]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 572,\n              columnNumber: 43\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 571,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Live Rank:\", /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\" \", liveRank]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 575,\n              columnNumber: 43\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 574,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rightsidebar\",\n      children: /*#__PURE__*/_jsxDEV(RightSidebar, {\n        onQuestionSelect: handleQuestionSelect,\n        answeredQuestions: answeredQuestions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 43\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 581,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 463,\n    columnNumber: 9\n  }, this);\n};\n_s(Paper, \"Ur7aB9cHS3EXQUzNZx/rfde3vuI=\");\n_c = Paper;\nexport default Paper;\nvar _c;\n$RefreshReg$(_c, \"Paper\");","map":{"version":3,"names":["React","useEffect","useState","RightSidebar","PaperHeader","jsxDEV","_jsxDEV","formatTime","time","minutes","Math","floor","seconds","Paper","answeredQuestions","_s","onClickNext","setResult","prev","selectedAnswers","activeQuestion","correctAnswer","score","correctAnswers","wrongAnswers","questions","length","setActiveQuestion","setShowResult","calculateResult","addLeadingZero","number","countdown","setCountDown","timerId","setInterval","prevCountDown","clearInterval","Qimages","setQImages","OPTimages","setOPTImages","fetchQImages","fetchedQImages","i","response","fetch","data","json","push","error","console","fetchOPTImages","fetchedOPTImages","j","className","children","fileName","_jsxFileName","lineNumber","columnNumber","showResult","map","qImage","index","src","image_data","alt","slice","optImage","optIndex","type","htmlFor","onClick","clearResponse","goToPreviousQuestion","disabled","class","result","accuracy","averageScore","topScore","liveRank","onQuestionSelect","handleQuestionSelect","_c","$RefreshReg$"],"sources":["/home/user/Documents/Daily work/october/24-10-2023/1-1questions Quiz App/client/src/Pages/Paper/Paper.jsx"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\n// import quiz from '../../Data/quesAns'\n// import './Paper.css'\n// import RightSidebar from '../../Components/RightSidebar/RightSidebar';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader'\n\n\n// // Defining Timer code \n// const formatTime = (time) => {\n//     let minutes = Math.floor(time / 60);\n//     let seconds = Math.floor(time - minutes * 60);\n\n//     if (minutes < 10) minutes = '0' + minutes;\n//     if (seconds < 10) seconds = '0' + seconds;\n//     return minutes + ':' + seconds;\n// }; // End of Defining Timer code \n\n\n\n// const Paper = ({ seconds, answeredQuestions }) => {\n\n//     const [activeQuestion, setActiveQuestion] = useState(0);\n//     const handleQuestionSelect = (questionNumber) => {\n//         setActiveQuestion(questionNumber - 1);\n//     }\n\n//     // const [questionStatus, setQuestionStatus] = useState(Array(30).fill('notAnswered'))\n//     // const [activeQuestion, setActiveQuestion] = useState(0)\n//     // const [selectedAnswer, setSelectedAnswer] = useState('') \n\n//     const [selectedAnswers, setSelectedAnswers] = useState(new Array(quiz.questions.length).fill(''));\n//     const [showResult, setShowResult] = useState(false)\n//     const [result, setResult] = useState({\n//         score: 0,\n//         correctAnswers: 0,\n//         wrongAnswers: 0,\n//     })\n\n\n\n//     const { questions } = quiz\n//     const { question, choices, correctAnswer } = questions[activeQuestion]\n//     const onClickNext = () => {\n//         setResult((prev) =>\n//             selectedAnswers[activeQuestion] === correctAnswer\n//                 ? {\n//                     ...prev,\n//                     score: prev.score + 5,\n//                     correctAnswers: prev.correctAnswers + 1,\n//                 }\n//                 : { ...prev, wrongAnswers: prev.wrongAnswers + 1 }\n//         );\n//         if (activeQuestion !== questions.length - 1) {\n//             setActiveQuestion((prev) => prev + 1);\n//         } else {\n//             // setActiveQuestion(0);\n//             setShowResult(true);\n//             calculateResult();//new added code\n//         }\n//     };\n\n\n//     const onAnswerSelected = (OptionLetter) => {\n//         // Update the selected answer for the current question\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = OptionLetter;\n//         setSelectedAnswers(updatedSelectedAnswers);\n//         // setSelectedAnswers(updatedSelectedAnswers, OptionLetter);\n\n//     };\n\n\n\n//     const clearResponse = () => {\n//         // Clear the response for the current question\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = '';\n//         setSelectedAnswers(updatedSelectedAnswers);\n//     };\n\n//     const goToPreviousQuestion = () => {\n//         // Move to the previous question\n//         if (activeQuestion > 0) {\n//             setActiveQuestion((prev) => prev - 1);\n//         }\n//     };\n\n\n\n//     const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\n//     const [countdown, setCountDown] = useState(seconds);\n//     useEffect(() => {\n//         const timerId = setInterval(() => {\n//             setCountDown((prevCountDown) =>\n//                 prevCountDown - 1\n//             );\n//         }, 1000)\n//         return () => {\n//             clearInterval(timerId);\n//         };\n//     }, [])\n\n//     useEffect(() => {\n//         if (countdown <= 0) {\n//             setShowResult(true);\n//             // clearInterval(timerId.current);\n//             // alert(\"End\");\n//         }\n//     }, [countdown]);\n\n\n//    // NEW ADDED CODE\n\n//     // const [showResult, setShowResult] = useState(false);\n//     const [accuracy, setAccuracy] = useState(0);\n//     const [averageScore, setAverageScore] = useState(0);\n//     const [topScore, setTopScore] = useState(0);\n//     const [liveRank, setLiveRank] = useState(0);\n\n//     const calculateResult = () => {\n//         // Calculate accuracy\n//         const totalAttempted = answeredQuestions.length;\n//         const totalCorrect = result.correctAnswers;\n//         const calculatedAccuracy = (totalCorrect / totalAttempted) * 100;\n//         setAccuracy(calculatedAccuracy.toFixed(2));\n\n//         // Calculate average score\n//         const calculatedAverageScore = result.score / totalAttempted;\n//         setAverageScore(calculatedAverageScore.toFixed(2));\n\n//         // Placeholder for live ranking data - Replace this with actual data\n//         const calculatedTopScore = 100;\n//         const calculatedLiveRank = 1;\n\n//         setTopScore(calculatedTopScore);\n//         setLiveRank(calculatedLiveRank);\n//     };\n\n//     // const onClickSubmit = () => {\n//     //     calculateResult();\n//     //     setShowResult(true);\n//     // };\n\n\n\n\n\n\n\n\n\n//     return (\n\n//         <div className='main'>\n//             <div className='sub-main'>\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     {!showResult ? (\n//                         <div>\n//                             <div className='subjects'>\n//                                 <button className='subject-btn'>Mathematics</button>\n//                                 <button className='subject-btn'>Physics</button>\n//                                 <button className='subject-btn'>Chemistry</button>\n//                             </div>\n//                             <div className='second-header'>\n//                                 <div className='single-select-question'>\n//                                     Single Select Question\n//                                 </div>\n//                                 <div className='right-header'>\n//                                     <div className='marks'>\n//                                         Marks: <div className='plus-mark'>+1</div>\n//                                         <div className='minus-mark'>-1</div>\n//                                     </div>\n//                                     <div className='timer'>\n//                                         <h3>Time Left: {formatTime(countdown)}</h3>\n//                                     </div>\n//                                 </div>\n//                             </div>\n//                             <div className='question-no'>\n//                                 <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\n//                                 <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\n//                             </div>\n\n//                             <h2 className='question'><img src={question} alt=\"question\" /></h2>\n\n//                             <ul className='options-container'>\n//                                 {choices.map((answer, index) => (\n//                                     <li key={answer}>\n//                                         <input type=\"radio\"\n//                                             // id={answer}\n//                                             id={`option-${index}`}\n//                                             name='answer'\n//                                             value={answer}\n//                                             checked={selectedAnswers[activeQuestion] === answer}\n//                                             onChange={() => onAnswerSelected(answer)} />\n\n\n//                                         <label className='alpha-index' htmlFor={`option-${index}`}>\n//                                             {/* htmlFor={answer} */}\n//                                             {String.fromCharCode(65 + index)}.\n//                                             <img src={answer} alt=\"answer\" />\n//                                         </label>\n//                                     </li>\n//                                 ))}\n//                             </ul>\n\n//                             <div className=\"flex-right\">\n//                                 <button className='clear-btn'>Mark for Review & Next</button>\n//                                 <button className='clear-btn' onClick={clearResponse}>Clear Response</button>\n//                                 <button className='previous-btn' onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\n//                                     <i class=\"fa-solid fa-angles-left\"></i>\n//                                     Previous\n//                                 </button>\n//                                 <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\n//                                     {activeQuestion === questions.length - 1 ? 'Submit' : 'Save & Next'}<i class=\"fa-solid fa-angles-right\"></i>\n//                                 </button>\n\n//                             </div>\n//                         </div>\n//                     ) : (\n//                         <div className=\"result\">\n//                             <h3>Result</h3>\n//                             <p>\n//                                 Total Questions: <span>{questions.length}</span>\n//                             </p>\n//                             <p>\n//                                 Total Score:<span> {result.score}</span>\n//                             </p>\n//                             <p>\n//                                 Correct Answers:<span> {result.correctAnswers}</span>\n//                             </p>\n//                             <p>\n//                                 Wrong Answers:<span> {result.wrongAnswers}</span>\n//                             </p>\n//                             <p>\n//                                 Accuracy:<span> {accuracy}%</span>\n//                             </p>\n//                             <p>\n//                                 Average Score:<span> {averageScore}</span>\n//                             </p>\n//                             <p>\n//                                 Top Score:<span> {topScore}</span>\n//                             </p>\n//                             <p>\n//                                 Live Rank:<span> {liveRank}</span>\n//                             </p>\n//                         </div>\n//                     )}\n//                 </div>\n//             </div>\n//             <div className='rightsidebar'><RightSidebar onQuestionSelect={handleQuestionSelect} answeredQuestions={answeredQuestions} /></div>\n//         </div>\n\n\n//     )\n// }\n\n// export default Paper\n\n\n\nimport React, { useEffect, useState } from 'react';\n// import quiz from '../../Data/quesAns'\nimport './Paper.css'\nimport RightSidebar from '../../Components/RightSidebar/RightSidebar';\nimport PaperHeader from '../../Components/PaperHeader/PaperHeader'\n\n\n// Defining Timer code \nconst formatTime = (time) => {\n    let minutes = Math.floor(time / 60);\n    let seconds = Math.floor(time - minutes * 60);\n\n    if (minutes < 10) minutes = '0' + minutes;\n    if (seconds < 10) seconds = '0' + seconds;\n    return minutes + ':' + seconds;\n}; // End of Defining Timer code \n\n\n\nconst Paper = ({ seconds, answeredQuestions }) => {\n\n    // const [activeQuestion, setActiveQuestion] = useState(0);\n    // const handleQuestionSelect = (questionNumber) => {\n    //     setActiveQuestion(questionNumber - 1);\n    // }\n\n    // const [questionStatus, setQuestionStatus] = useState(Array(30).fill('notAnswered'))\n    // const [activeQuestion, setActiveQuestion] = useState(0)\n    // const [selectedAnswer, setSelectedAnswer] = useState('') \n\n    // const [selectedAnswers, setSelectedAnswers] = useState(new Array(quiz.questions.length).fill(''));\n    // const [showResult, setShowResult] = useState(false)\n    // const [result, setResult] = useState({\n    //     score: 0,\n    //     correctAnswers: 0,\n    //     wrongAnswers: 0,\n    // })\n\n   \n\n    // const { questions } = quiz\n    // const { correctAnswer } = [activeQuestion]\n    const onClickNext = () => {\n        setResult((prev) =>\n            selectedAnswers[activeQuestion] === correctAnswer\n                ? {\n                    ...prev,\n                    score: prev.score + 5,\n                    correctAnswers: prev.correctAnswers + 1,\n                }\n                : { ...prev, wrongAnswers: prev.wrongAnswers + 1 }\n        );\n        if (activeQuestion !== questions.length - 1) {\n            setActiveQuestion((prev) => prev + 1);\n        } else {\n            // setActiveQuestion(0);\n            setShowResult(true);\n            calculateResult();//new added code\n        }\n    };\n\n\n    // const onAnswerSelected = (OptionLetter) => {\n    //     // Update the selected answer for the current question\n    //     const updatedSelectedAnswers = [...selectedAnswers];\n    //     updatedSelectedAnswers[activeQuestion] = OptionLetter;\n    //     setSelectedAnswers(updatedSelectedAnswers);\n    //     // setSelectedAnswers(updatedSelectedAnswers, OptionLetter);\n\n    // };\n\n\n\n    // const clearResponse = () => {\n    //     // Clear the response for the current question\n    //     const updatedSelectedAnswers = [...selectedAnswers];\n    //     updatedSelectedAnswers[activeQuestion] = '';\n    //     setSelectedAnswers(updatedSelectedAnswers);\n    // };\n\n    // const goToPreviousQuestion = () => {\n    //     // Move to the previous question\n    //     if (activeQuestion > 0) {\n    //         setActiveQuestion((prev) => prev - 1);\n    //     }\n    // };\n\n\n\n    const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\n    const [countdown, setCountDown] = useState(seconds);\n    useEffect(() => {\n        const timerId = setInterval(() => {\n            setCountDown((prevCountDown) =>\n                prevCountDown - 1\n            );\n        }, 1000)\n        return () => {\n            clearInterval(timerId);\n        };\n    }, [])\n\n    useEffect(() => {\n        if (countdown <= 0) {\n            setShowResult(true);\n            // clearInterval(timerId.current);\n            // alert(\"End\");\n        }\n    }, [countdown]);\n\n\n    // NEW ADDED CODE\n\n    // const [showResult, setShowResult] = useState(false);\n    // const [accuracy, setAccuracy] = useState(0);\n    // const [averageScore, setAverageScore] = useState(0);\n    // const [topScore, setTopScore] = useState(0);\n    // const [liveRank, setLiveRank] = useState(0);\n\n    // const calculateResult = () => {\n    //     // Calculate accuracy\n    //     const totalAttempted = answeredQuestions.length;\n    //     const totalCorrect = result.correctAnswers;\n    //     const calculatedAccuracy = (totalCorrect / totalAttempted) * 100;\n    //     setAccuracy(calculatedAccuracy.toFixed(2));\n\n    //     // Calculate average score\n    //     const calculatedAverageScore = result.score / totalAttempted;\n    //     setAverageScore(calculatedAverageScore.toFixed(2));\n\n    //     // Placeholder for live ranking data - Replace this with actual data\n    //     const calculatedTopScore = 100;\n    //     const calculatedLiveRank = 1;\n\n    //     setTopScore(calculatedTopScore);\n    //     setLiveRank(calculatedLiveRank);\n    // };\n\n    // const onClickSubmit = () => {\n    //     calculateResult();\n    //     setShowResult(true);\n    // };\n\n\n    const [ Qimages,setQImages] = useState([]);\n    const [ OPTimages, setOPTImages] = useState([]);\n\n    useEffect(() => {\n        // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n        const fetchQImages = async () => {\n            let fetchedQImages = [];\n\n            for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n                try {\n                    const response = await fetch(`http://localhost:7000/images/${i}`);\n                    const data = await response.json();\n                    if (data.length > 0) {\n                        fetchedQImages.push(data[0]); // Add only the first image from each set\n                    }\n                } catch (error) {\n                    console.error('Error fetching Qimages:', error);\n                }\n            }\n\n            setQImages(fetchedQImages);\n        };\n\n        // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n        const fetchOPTImages = async () => {\n            let fetchedOPTImages = [];\n\n            for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n                try {\n                    for (let j = i + 1; j <= i + 4; j++) {\n                        const response = await fetch(`http://localhost:7000/images/${j}`);\n                        const data = await response.json();\n                        if (data.length > 0) {\n                            fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n                        }\n                    }\n                } catch (error) {\n                    console.error('Error fetching OPTimages:', error);\n                }\n            }\n\n            setOPTImages(fetchedOPTImages);\n        };\n\n        fetchQImages();\n        fetchOPTImages();\n    }, []); // Empty dependency array to fetch data only once when the component mounts\n\n\n\n\n\n\n\n\n    return (\n\n        <div className='main'>\n            <div className='sub-main'>\n                <div><PaperHeader /></div>\n                <div className=\"quiz-container\">\n                    {!showResult ? (\n                        <div>\n                            <div className='subjects'>\n                                <button className='subject-btn'>Mathematics</button>\n                                <button className='subject-btn'>Physics</button>\n                                <button className='subject-btn'>Chemistry</button>\n                            </div>\n                            <div className='second-header'>\n                                <div className='single-select-question'>\n                                    Single Select Question\n                                </div>\n                                <div className='right-header'>\n                                    <div className='marks'>\n                                        Marks: <div className='plus-mark'>+1</div>\n                                        <div className='minus-mark'>-1</div>\n                                    </div>\n                                    <div className='timer'>\n                                        <h3>Time Left: {formatTime(countdown)}</h3>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className='question-no'>\n                                <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\n                                <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\n                            </div>\n\n                           \n\n\n\n                            {Qimages.map((qImage, index) => (\n                                <div key={index}>\n                                    {/* <h2>QImage {index + 1}</h2> */}\n                                    <div className='question-no'>\n                                        <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\n                                        <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\n                                    </div>\n                                    <h2 className='question'> <img\n                                        src={`data:image/png;base64,${qImage.image_data}`}\n                                        alt={`QImage ${index + 1}`}\n                                    /></h2>\n                              \n                                    <ul className='options-container'>\n                                        {OPTimages.slice(index * 4, index * 4 + 4).map((optImage, optIndex) => (\n                                            <li>\n                                                <input type=\"radio\"\n                                                // // id={answer}\n                                                //     id={`option-${index}`}\n                                                //     name='answer'\n                                                //     value={optImage}\n                                                //     checked={selectedAnswers[activeQuestion] === optImage}\n                                                //     onChange={() => onAnswerSelected(optImage)} \n                                                />\n\n\n                                                <label className='alpha-index' htmlFor={`option-${index}`}>\n                                                    <img\n                                                        key={optIndex}\n                                                        src={`data:image/png;base64,${optImage.image_data}`}\n                                                        alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n                                                    />\n                                                </label>\n                                            </li>\n                                        ))}\n                                    </ul>\n                                </div>\n                            ))}\n\n\n\n                            <div className=\"flex-right\">\n                                <button className='clear-btn'>Mark for Review & Next</button>\n                                <button className='clear-btn' onClick={clearResponse}>Clear Response</button>\n                                <button className='previous-btn' onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\n                                    <i class=\"fa-solid fa-angles-left\"></i>\n                                    Previous\n                                </button>\n                                <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\n                                    {activeQuestion === questions.length - 1 ? 'Submit' : 'Save & Next'}<i class=\"fa-solid fa-angles-right\"></i>\n                                </button>\n\n                            </div>\n                        </div>\n                    ) : (\n                        <div className=\"result\">\n                            <h3>Result</h3>\n                            <p>\n                                Total Questions: <span>{questions.length}</span>\n                            </p>\n                            <p>\n                                Total Score:<span> {result.score}</span>\n                            </p>\n                            <p>\n                                Correct Answers:<span> {result.correctAnswers}</span>\n                            </p>\n                            <p>\n                                Wrong Answers:<span> {result.wrongAnswers}</span>\n                            </p>\n                            <p>\n                                Accuracy:<span> {accuracy}%</span>\n                            </p>\n                            <p>\n                                Average Score:<span> {averageScore}</span>\n                            </p>\n                            <p>\n                                Top Score:<span> {topScore}</span>\n                            </p>\n                            <p>\n                                Live Rank:<span> {liveRank}</span>\n                            </p>\n                        </div>\n                    )}\n                </div>\n            </div>\n            <div className='rightsidebar'><RightSidebar onQuestionSelect={handleQuestionSelect} answeredQuestions={answeredQuestions} /></div>\n        </div>\n\n\n    )\n}\n\nexport default Paper\n\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAIA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAUA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD;AACA,OAAO,aAAa;AACpB,OAAOC,YAAY,MAAM,4CAA4C;AACrE,OAAOC,WAAW,MAAM,0CAA0C;;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"},"metadata":{},"sourceType":"module","externalDependencies":[]}