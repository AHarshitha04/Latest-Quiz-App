{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/Daily work/october/24-10-2023/Latest-Quiz-App/quiz_app/front-end/src/Pages/Paper/Paper.jsx\",\n  _s = $RefreshSig$();\n// test commit\n\n// import React, { useEffect, useState } from 'react';\n// import quiz from '../../Data/quesAns'\n// import './Paper.css'\n// import RightSidebar from '../../Components/RightSidebar/RightSidebar';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader'\n\n// // Defining Timer code \n// const formatTime = (time) => {\n//     let minutes = Math.floor(time / 60);\n//     let seconds = Math.floor(time - minutes * 60);\n\n//     if (minutes < 10) minutes = '0' + minutes;\n//     if (seconds < 10) seconds = '0' + seconds;\n//     return minutes + ':' + seconds;\n// }; // End of Defining Timer code \n\n// const Paper = ({ seconds, answeredQuestions }) => {\n\n//     const [activeQuestion, setActiveQuestion] = useState(0);\n//     const handleQuestionSelect = (questionNumber) => {\n//         setActiveQuestion(questionNumber - 1);\n//     }\n\n//     // const [questionStatus, setQuestionStatus] = useState(Array(30).fill('notAnswered'))\n//     // const [activeQuestion, setActiveQuestion] = useState(0)\n//     // const [selectedAnswer, setSelectedAnswer] = useState('') \n\n//     const [selectedAnswers, setSelectedAnswers] = useState(new Array(quiz.questions.length).fill(''));\n//     const [showResult, setShowResult] = useState(false)\n//     const [result, setResult] = useState({\n//         score: 0,\n//         correctAnswers: 0,\n//         wrongAnswers: 0,\n//     })\n\n//     const { questions } = quiz\n//     const { question, choices, correctAnswer } = questions[activeQuestion]\n//     const onClickNext = () => {\n//         setResult((prev) =>\n//             selectedAnswers[activeQuestion] === correctAnswer\n//                 ? {\n//                     ...prev,\n//                     score: prev.score + 5,\n//                     correctAnswers: prev.correctAnswers + 1,\n//                 }\n//                 : { ...prev, wrongAnswers: prev.wrongAnswers + 1 }\n//         );\n//         if (activeQuestion !== questions.length - 1) {\n//             setActiveQuestion((prev) => prev + 1);\n//         } else {\n//             // setActiveQuestion(0);\n//             setShowResult(true);\n//             calculateResult();//new added code\n//         }\n//     };\n\n//     const onAnswerSelected = (OptionLetter) => {\n//         // Update the selected answer for the current question\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = OptionLetter;\n//         setSelectedAnswers(updatedSelectedAnswers);\n//         // setSelectedAnswers(updatedSelectedAnswers, OptionLetter);\n\n//     };\n\n//     const clearResponse = () => {\n//         // Clear the response for the current question\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = '';\n//         setSelectedAnswers(updatedSelectedAnswers);\n//     };\n\n//     const goToPreviousQuestion = () => {\n//         // Move to the previous question\n//         if (activeQuestion > 0) {\n//             setActiveQuestion((prev) => prev - 1);\n//         }\n//     };\n\n//     const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\n//     const [countdown, setCountDown] = useState(seconds);\n//     useEffect(() => {\n//         const timerId = setInterval(() => {\n//             setCountDown((prevCountDown) =>\n//                 prevCountDown - 1\n//             );\n//         }, 1000)\n//         return () => {\n//             clearInterval(timerId);\n//         };\n//     }, [])\n\n//     useEffect(() => {\n//         if (countdown <= 0) {\n//             setShowResult(true);\n//             // clearInterval(timerId.current);\n//             // alert(\"End\");\n//         }\n//     }, [countdown]);\n\n//    // NEW ADDED CODE\n\n//     // const [showResult, setShowResult] = useState(false);\n//     const [accuracy, setAccuracy] = useState(0);\n//     const [averageScore, setAverageScore] = useState(0);\n//     const [topScore, setTopScore] = useState(0);\n//     const [liveRank, setLiveRank] = useState(0);\n\n//     const calculateResult = () => {\n//         // Calculate accuracy\n//         const totalAttempted = answeredQuestions.length;\n//         const totalCorrect = result.correctAnswers;\n//         const calculatedAccuracy = (totalCorrect / totalAttempted) * 100;\n//         setAccuracy(calculatedAccuracy.toFixed(2));\n\n//         // Calculate average score\n//         const calculatedAverageScore = result.score / totalAttempted;\n//         setAverageScore(calculatedAverageScore.toFixed(2));\n\n//         // Placeholder for live ranking data - Replace this with actual data\n//         const calculatedTopScore = 100;\n//         const calculatedLiveRank = 1;\n\n//         setTopScore(calculatedTopScore);\n//         setLiveRank(calculatedLiveRank);\n//     };\n\n//     // const onClickSubmit = () => {\n//     //     calculateResult();\n//     //     setShowResult(true);\n//     // };\n\n//     return (\n\n//         <div className='main'>\n//             <div className='sub-main'>\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     {!showResult ? (\n//                         <div>\n//                             <div className='subjects'>\n//                                 <button className='subject-btn'>Mathematics</button>\n//                                 <button className='subject-btn'>Physics</button>\n//                                 <button className='subject-btn'>Chemistry</button>\n//                             </div>\n//                             <div className='second-header'>\n//                                 <div className='single-select-question'>\n//                                     Single Select Question\n//                                 </div>\n//                                 <div className='right-header'>\n//                                     <div className='marks'>\n//                                         Marks: <div className='plus-mark'>+1</div>\n//                                         <div className='minus-mark'>-1</div>\n//                                     </div>\n//                                     <div className='timer'>\n//                                         <h3>Time Left: {formatTime(countdown)}</h3>\n//                                     </div>\n//                                 </div>\n//                             </div>\n//                             <div className='question-no'>\n//                                 <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\n//                                 <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\n//                             </div>\n\n//                             <h2 className='question'><img src={question} alt=\"question\" /></h2>\n\n//                             <ul className='options-container'>\n//                                 {choices.map((answer, index) => (\n//                                     <li key={answer}>\n//                                         <input type=\"radio\"\n//                                             // id={answer}\n//                                             id={`option-${index}`}\n//                                             name='answer'\n//                                             value={answer}\n//                                             checked={selectedAnswers[activeQuestion] === answer}\n//                                             onChange={() => onAnswerSelected(answer)} />\n\n//                                         <label className='alpha-index' htmlFor={`option-${index}`}>\n//                                             {/* htmlFor={answer} */}\n//                                             {String.fromCharCode(65 + index)}.\n//                                             <img src={answer} alt=\"answer\" />\n//                                         </label>\n//                                     </li>\n//                                 ))}\n//                             </ul>\n\n//                             <div className=\"flex-right\">\n//                                 <button className='clear-btn'>Mark for Review & Next</button>\n//                                 <button className='clear-btn' onClick={clearResponse}>Clear Response</button>\n//                                 <button className='previous-btn' onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\n//                                     <i class=\"fa-solid fa-angles-left\"></i>\n//                                     Previous\n//                                 </button>\n//                                 <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\n//                                     {activeQuestion === questions.length - 1 ? 'Submit' : 'Save & Next'}<i class=\"fa-solid fa-angles-right\"></i>\n//                                 </button>\n\n//                             </div>\n//                         </div>\n//                     ) : (\n//                         <div className=\"result\">\n//                             <h3>Result</h3>\n//                             <p>\n//                                 Total Questions: <span>{questions.length}</span>\n//                             </p>\n//                             <p>\n//                                 Total Score:<span> {result.score}</span>\n//                             </p>\n//                             <p>\n//                                 Correct Answers:<span> {result.correctAnswers}</span>\n//                             </p>\n//                             <p>\n//                                 Wrong Answers:<span> {result.wrongAnswers}</span>\n//                             </p>\n//                             <p>\n//                                 Accuracy:<span> {accuracy}%</span>\n//                             </p>\n//                             <p>\n//                                 Average Score:<span> {averageScore}</span>\n//                             </p>\n//                             <p>\n//                                 Top Score:<span> {topScore}</span>\n//                             </p>\n//                             <p>\n//                                 Live Rank:<span> {liveRank}</span>\n//                             </p>\n//                         </div>\n//                     )}\n//                 </div>\n//             </div>\n//             <div className='rightsidebar'><RightSidebar onQuestionSelect={handleQuestionSelect} answeredQuestions={answeredQuestions} /></div>\n//         </div>\n\n//     )\n// }\n\n// export default Paper\n\n// import React, { useEffect, useState } from 'react';\n// // import quiz from '../../Data/quesAns'\n// import './Paper.css'\n// // import RightSidebar from '../../Components/RightSidebar/RightSidebar';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader'\n\n// // Defining Timer code \n// // const formatTime = (time) => {\n// //     let minutes = Math.floor(time / 60);\n// //     let seconds = Math.floor(time - minutes * 60);\n\n// //     if (minutes < 10) minutes = '0' + minutes;\n// //     if (seconds < 10) seconds = '0' + seconds;\n// //     return minutes + ':' + seconds;\n// // }; // End of Defining Timer code \n\n// const Paper = () => {\n\n//     // const [activeQuestion, setActiveQuestion] = useState(0);\n//     // const handleQuestionSelect = (questionNumber) => {\n//     //     setActiveQuestion(questionNumber - 1);\n//     // }\n\n//     // const [questionStatus, setQuestionStatus] = useState(Array(30).fill('notAnswered'))\n//     // const [activeQuestion, setActiveQuestion] = useState(0)\n//     // const [selectedAnswer, setSelectedAnswer] = useState('') \n\n//     // const [selectedAnswers, setSelectedAnswers] = useState(new Array(quiz.questions.length).fill(''));\n//     // const [showResult, setShowResult] = useState(false)\n//     // const [result, setResult] = useState({\n//     //     score: 0,\n//     //     correctAnswers: 0,\n//     //     wrongAnswers: 0,\n//     // })\n\n//     // const { questions } = quiz\n//     // const { Qimages, OPTimages, correctAnswer } = [activeQuestion]\n//     // const onClickNext = () => {\n//     //     setResult((prev) =>\n//     //         selectedAnswers[activeQuestion] === correctAnswer\n//     //             ? {\n//     //                 ...prev,\n//     //                 score: prev.score + 5,\n//     //                 correctAnswers: prev.correctAnswers + 1,\n//     //             }\n//     //             : { ...prev, wrongAnswers: prev.wrongAnswers + 1 }\n//     //     );\n//     //     if (activeQuestion !== questions.length - 1) {\n//     //         setActiveQuestion((prev) => prev + 1);\n//     //     } else {\n//     //         // setActiveQuestion(0);\n//     //         setShowResult(true);\n//     //         calculateResult();//new added code\n//     //     }\n//     // };\n\n//     // const onAnswerSelected = (OptionLetter) => {\n//     //     // Update the selected answer for the current question\n//     //     const updatedSelectedAnswers = [...selectedAnswers];\n//     //     updatedSelectedAnswers[activeQuestion] = OptionLetter;\n//     //     setSelectedAnswers(updatedSelectedAnswers);\n//     //     // setSelectedAnswers(updatedSelectedAnswers, OptionLetter);\n\n//     // };\n\n//     // const clearResponse = () => {\n//     //     // Clear the response for the current question\n//     //     const updatedSelectedAnswers = [...selectedAnswers];\n//     //     updatedSelectedAnswers[activeQuestion] = '';\n//     //     setSelectedAnswers(updatedSelectedAnswers);\n//     // };\n\n//     // const goToPreviousQuestion = () => {\n//     //     // Move to the previous question\n//     //     if (activeQuestion > 0) {\n//     //         setActiveQuestion((prev) => prev - 1);\n//     //     }\n//     // };\n\n//     // const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\n//     // const [countdown, setCountDown] = useState(seconds);\n//     // useEffect(() => {\n//     //     const timerId = setInterval(() => {\n//     //         setCountDown((prevCountDown) =>\n//     //             prevCountDown - 1\n//     //         );\n//     //     }, 1000)\n//     //     return () => {\n//     //         clearInterval(timerId);\n//     //     };\n//     // }, [])\n\n//     // useEffect(() => {\n//     //     if (countdown <= 0) {\n//     //         setShowResult(true);\n//     //         // clearInterval(timerId.current);\n//     //         // alert(\"End\");\n//     //     }\n//     // }, [countdown]);\n\n//     // NEW ADDED CODE\n\n//     // const [showResult, setShowResult] = useState(false);\n//     // const [accuracy, setAccuracy] = useState(0);\n//     // const [averageScore, setAverageScore] = useState(0);\n//     // const [topScore, setTopScore] = useState(0);\n//     // const [liveRank, setLiveRank] = useState(0);\n\n//     // const calculateResult = () => {\n//     //     // Calculate accuracy\n//     //     const totalAttempted = answeredQuestions.length;\n//     //     const totalCorrect = result.correctAnswers;\n//     //     const calculatedAccuracy = (totalCorrect / totalAttempted) * 100;\n//     //     setAccuracy(calculatedAccuracy.toFixed(2));\n\n//     //     // Calculate average score\n//     //     const calculatedAverageScore = result.score / totalAttempted;\n//     //     setAverageScore(calculatedAverageScore.toFixed(2));\n\n//     //     // Placeholder for live ranking data - Replace this with actual data\n//     //     const calculatedTopScore = 100;\n//     //     const calculatedLiveRank = 1;\n\n//     //     setTopScore(calculatedTopScore);\n//     //     setLiveRank(calculatedLiveRank);\n//     // };\n\n//     // const onClickSubmit = () => {\n//     //     calculateResult();\n//     //     setShowResult(true);\n//     // };\n\n//     const [Qimages,setQImages] = useState([]);\n//     const [OPTimages,setOPTImages] = useState([]);\n\n//     useEffect(() => {\n//         // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n//         const fetchQImages = async () => {\n//             let fetchedQImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     const response = await fetch(`http://localhost:7000/images/${i}`);\n//                     const data = await response.json();\n//                     if (data.length > 0) {\n//                         fetchedQImages.push(data[0]); // Add only the first image from each set\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching Qimages:', error);\n//                 }\n//             }\n\n//             setQImages(fetchedQImages);\n//         };\n\n//         // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n//         const fetchOPTImages = async () => {\n//             let fetchedOPTImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     for (let j = i + 1; j <= i + 4; j++) {\n//                         const response = await fetch(`http://localhost:7000/images/${j}`);\n//                         const data = await response.json();\n//                         if (data.length > 0) {\n//                             fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n//                         }\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching OPTimages:', error);\n//                 }\n//             }\n\n//             setOPTImages(fetchedOPTImages);\n//         };\n\n//         fetchQImages();\n//         fetchOPTImages();\n//     }, []); // Empty dependency array to fetch data only once when the component mounts\n\n//     return (\n\n//         <div className='main'>\n//             <div className='sub-main'>\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     {/* {!showResult ? ( */}\n//                         <div>\n//                             <div className='subjects'>\n//                                 <button className='subject-btn'>Mathematics</button>\n//                                 <button className='subject-btn'>Physics</button>\n//                                 <button className='subject-btn'>Chemistry</button>\n//                             </div>\n//                             <div className='second-header'>\n//                                 <div className='single-select-question'>\n//                                     Single Select Question\n//                                 </div>\n//                                 {/* <div className='right-header'>\n//                                     <div className='marks'>\n//                                         Marks: <div className='plus-mark'>+1</div>\n//                                         <div className='minus-mark'>-1</div>\n//                                     </div>\n//                                     <div className='timer'>\n//                                         <h3>Time Left: {formatTime(countdown)}</h3>\n//                                     </div>\n//                                 </div> */}\n//                             </div>\n//                             {/* <div className='question-no'>\n//                                 <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\n//                                 <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\n//                             </div> */}\n\n//                             {Qimages.map((qImage, index) => (\n//                                 <div key={index}>\n//                                     {/* <h2>QImage {index + 1}</h2> */}\n//                                     {/* <div className='question-no'>\n//                                         <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\n//                                         <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\n//                                     </div> */}\n//                                     <h2 className='question'> <img\n//                                         src={`data:image/png;base64,${qImage.image_data}`}\n//                                         alt={`QImage ${index + 1}`}\n//                                     /></h2>\n\n//                                     <ul className='options-container'>\n//                                         {OPTimages.slice(index * 4, index * 4 + 4).map((optImage, optIndex) => (\n//                                             <li>\n//                                                 <input type=\"radio\"\n//                                                 // // id={answer}\n//                                                 //     id={`option-${index}`}\n//                                                 //     name='answer'\n//                                                 //     value={optImage}\n//                                                 //     checked={selectedAnswers[activeQuestion] === optImage}\n//                                                 //     onChange={() => onAnswerSelected(optImage)} \n//                                                 />\n\n//                                                 <label className='alpha-index' >\n//                                                     <img\n//                                                         key={optIndex}\n//                                                         src={`data:image/png;base64,${optImage.image_data}`}\n//                                                         alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                                     />\n//                                                 </label>\n//                                             </li>\n//                                         ))}\n//                                     </ul>\n//                                 </div>\n//                             ))}\n\n//                             {/* <div className=\"flex-right\">\n//                                 <button className='clear-btn'>Mark for Review & Next</button>\n//                                 <button className='clear-btn' onClick={clearResponse}>Clear Response</button>\n//                                 <button className='previous-btn' onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\n//                                     <i class=\"fa-solid fa-angles-left\"></i>\n//                                     Previous\n//                                 </button>\n//                                 <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\n//                                     {activeQuestion === questions.length - 1 ? 'Submit' : 'Save & Next'}<i class=\"fa-solid fa-angles-right\"></i>\n//                                 </button>\n\n//                             </div> */}\n//                         </div>\n//                     {/* ) : ( */}\n//                         {/* <div className=\"result\"> */}\n//                             {/* <h3>Result</h3>\n//                             <p>\n//                                 Total Questions: <span>{questions.length}</span>\n//                             </p>\n//                             <p>\n//                                 Total Score:<span> {result.score}</span>\n//                             </p>\n//                             <p>\n//                                 Correct Answers:<span> {result.correctAnswers}</span>\n//                             </p>\n//                             <p>\n//                                 Wrong Answers:<span> {result.wrongAnswers}</span>\n//                             </p>\n//                             <p>\n//                                 Accuracy:<span> {accuracy}%</span>\n//                             </p>\n//                             <p>\n//                                 Average Score:<span> {averageScore}</span>\n//                             </p>\n//                             <p>\n//                                 Top Score:<span> {topScore}</span>\n//                             </p>\n//                             <p>\n//                                 Live Rank:<span> {liveRank}</span>\n//                             </p> */}\n//                         {/* </div> */}\n//                     {/* )} */}\n//                 </div>\n//             </div>\n//             {/* <div className='rightsidebar'><RightSidebar onQuestionSelect={handleQuestionSelect} answeredQuestions={answeredQuestions} /></div> */}\n//         </div>\n\n//     )\n// }\n\n// export default Paper\n\n// import React, { useEffect, useState } from 'react';\n// import './Paper.css';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader';\n\n// const Paper = () => {\n//     const [Qimages, setQImages] = useState([]);\n//     const [OPTimages, setOPTImages] = useState([]);\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n\n//         useEffect(() => {\n//             // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n//             const fetchQImages = async () => {\n//                 let fetchedQImages = [];\n\n//                 for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                     try {\n//                         const response = await fetch(`http://localhost:7000/images/${i}`);\n//                         const data = await response.json();\n//                         if (data.length > 0) {\n//                             fetchedQImages.push(data[0]); // Add only the first image from each set\n//                         }\n//                     } catch (error) {\n//                         console.error('Error fetching Qimages:', error);\n//                     }\n//                 }\n\n//                 setQImages(fetchedQImages);\n//             };\n\n//             // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n//             const fetchOPTImages = async () => {\n//                 let fetchedOPTImages = [];\n\n//                 for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                     try {\n//                         for (let j = i + 1; j <= i + 4; j++) {\n//                             const response = await fetch(`http://localhost:7000/images/${j}`);\n//                             const data = await response.json();\n//                             if (data.length > 0) {\n//                                 fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n//                             }\n//                         }\n//                     } catch (error) {\n//                         console.error('Error fetching OPTimages:', error);\n//                     }\n//                 }\n\n//                 setOPTImages(fetchedOPTImages);\n//             };\n\n//             fetchQImages();\n//             fetchOPTImages();\n//         }, []); // Empty dependency array to fetch data only once when the component mounts\n\n//     const handleNextClick = () => {\n//         // Move to the next question when the \"Next\" button is clicked\n//         setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n//     };\n\n//     return (\n//         <div className='main'>\n//             {/* ... */}\n//             <div><PaperHeader /></div>\n//             <div className='options-container'>\n//                 {/* Display only the current question and its options */}\n//                 <h2 className='question'>\n//                     <img\n//                         src={`data:image/png;base64,${Qimages[currentQuestionIndex].image_data}`}\n//                         alt={`QImage ${currentQuestionIndex + 1}`}\n//                     />\n//                 </h2>\n//                 <ul className='options-container'>\n//                     {OPTimages\n//                         .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\n//                         .map((optImage, optIndex) => (\n//                             <li key={optIndex}>\n//                                 <input type=\"radio\" />\n//                                 <label className='alpha-index'>\n//                                     <img\n//                                         src={`data:image/png;base64,${optImage.image_data}`}\n//                                         alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                     />\n//                                 </label>\n//                             </li>\n//                         ))}\n//                 </ul>\n//                 <button onClick={handleNextClick}>Next</button>\n//             </div>\n//             {/* ... */}\n//         </div>\n//     );\n// };\n\n// export default Paper;\n\n// import React, { useEffect, useState } from 'react';\n// import './Paper.css';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader';\n// // import { Waveform } from '@uiball/loaders'\n\n// const Paper = () => {\n\n//     const [Qimages, setQImages] = useState([]);\n//     const [OPTimages, setOPTImages] = useState([]);\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n\n//     useEffect(() => {\n//         // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n//         const fetchQImages = async () => {\n//             let fetchedQImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     const response = await fetch(`http://localhost:7001/images/${i}`);\n//                     const data = await response.json();\n//                     if (data.length > 0) {\n//                         fetchedQImages.push(data[0]); // Add only the first image from each set\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching Qimages:', error);\n//                 }\n//             }\n\n//             setQImages(fetchedQImages);\n//         };\n\n//         // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n//         const fetchOPTImages = async () => {\n//             let fetchedOPTImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     for (let j = i + 1; j <= i + 4; j++) {\n//                         const response = await fetch(`http://localhost:7001/images/${j}`);\n//                         const data = await response.json();\n//                         if (data.length > 0) {\n//                             fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n//                         }\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching OPTimages:', error);\n//                 }\n//             }\n\n//             setOPTImages(fetchedOPTImages);\n//         };\n\n//         fetchQImages();\n//         fetchOPTImages();\n//     }, []); // Empty dependency array to fetch data only once when the component mounts\n\n//     const handleNextClick = () => {\n//         // Move to the next question when the \"Next\" button is clicked\n//         setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n//     };\n\n//     // Check if Qimages[currentQuestionIndex] is defined before accessing its properties\n//     const currentQuestion = Qimages[currentQuestionIndex];\n//     const questionImageSrc = currentQuestion ? `data:image/png;base64,${currentQuestion.image_data}` : '';\n\n//     return (\n//         <div className='main'>\n//             <div className='sub-main'>\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     <div className='options-container'>\n//                         <h2 className='question'>\n//                             {currentQuestion ? (\n//                                 <img\n//                                     src={questionImageSrc}\n//                                     alt={`QImage ${currentQuestionIndex + 1}`}\n//                                 />\n//                             ) : (\n//                                 <p>Loading question...</p>\n\n//                             // <Waveform\n//                             //     size={40}\n//                             //     lineWeight={3.5}\n//                             //     speed={1}\n//                             //     color=\"black\"\n//                             // />\n//                             )}\n//                         </h2>\n//                         <ul className='options-container'>\n//                             {/* ... (options rendering logic) */}\n//                             {OPTimages\n//                                 .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\n//                                 .map((optImage, optIndex) => (\n\n//                                     <li key={optIndex}>\n//                                         <input type=\"radio\" />\n//                                         <label className='alpha-index'>\n//                                             <img\n//                                                 src={`data:image/png;base64,${optImage.image_data}`}\n//                                                 alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                             />\n//                                         </label>\n//                                     </li>\n//                                 ))}\n//                         </ul>\n//                         <button onClick={handleNextClick}>Next</button>\n//                     </div>\n\n//                 </div>\n//             </div>\n\n//             {/* ... */}\n//         </div>\n//     );\n// };\n\n// export default Paper;\n\n// import React, { useEffect, useState } from 'react';\n// import './Paper.css';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader';\n// // import { Waveform } from '@uiball/loaders'\n// import RightSidebar from '../../Components/RightSidebar/RightSidebar';\n// import { DotSpinner } from '@uiball/loaders'\n\n// const Paper = () => {\n\n//     const [Qimages, setQImages] = useState([]);\n//     const [OPTimages, setOPTImages] = useState([]);\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n//     // const [tc,setTc]=useState(\"\")\n//     // const [selectedAnswers, setSelectedAnswers] = useState(new Array(Qimages.questions.length).fill(''));\n\n//     useEffect(() => {\n//         // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n//         const fetchQImages = async () => {\n//             let fetchedQImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     const response = await fetch(`http://localhost:7002/images/${i}`);\n//                     const data = await response.json();\n//                     if (data.length > 0) {\n//                         fetchedQImages.push(data[0]); // Add only the first image from each set\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching Qimages:', error);\n//                 }\n//             }\n\n//             setQImages(fetchedQImages);\n//         };\n\n//         // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n//         const fetchOPTImages = async () => {\n//             let fetchedOPTImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     for (let j = i + 1; j <= i + 4; j++) {\n//                         const response = await fetch(`http://localhost:7002/images/${j}`);\n//                         const data = await response.json();\n//                         if (data.length > 0) {\n//                             fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n//                         }\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching OPTimages:', error);\n//                 }\n//             }\n\n//             setOPTImages(fetchedOPTImages);\n//         };\n\n//         fetchQImages();\n//         fetchOPTImages();\n//     }, []); // Empty dependency array to fetch data only once when the component mounts\n\n//     const handleNextClick = () => {\n//         // Move to the next question when the \"Next\" button is clicked\n//         setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n//         setTimer(0);\n//     };\n\n//     const handlepreClick=()=>{\n//         setCurrentQuestionIndex(prevIndex => prevIndex - 1);\n//         // setTimer(timer)\n\n//     }\n//     // const [timer, setTimer] = useState(0);\n//     // useEffect(() => {\n//     //     let interval;                // Start the timer\n\n//     //     interval = setInterval(() => {\n//     //         setTimer(prevTimer => prevTimer + 1);\n//     //     }, 1000);\n\n//     //     // Clear the interval when the component unmounts\n\n//     //     return () => {\n\n//     //         clearInterval(interval);\n\n//     //     };\n\n//     // }, []); // Empty dependency array ensures the effect runs once after the initial render\n\n//     // const onAnswerSelected = (OptionLetter) => {\n//     //     // Update the selected answer for the current question\n//     //     const updatedSelectedAnswers = [...selectedAnswers];\n//     //     updatedSelectedAnswers[currentQuestionIndex] = OptionLetter;\n//     //     setSelectedAnswers(updatedSelectedAnswers);\n//     //     // setSelectedAnswers(updatedSelectedAnswers, OptionLetter);\n\n//     // };\n\n//     // Check if Qimages[currentQuestionIndex] is defined before accessing its properties\n//     const currentQuestion = Qimages[currentQuestionIndex];\n//     const questionImageSrc = currentQuestion ? `data:image/png;base64,${currentQuestion.image_data}` : '';\n\n//     const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\n\n//     // const [timer, setTimer] = useState(parseInt(localStorage.getItem(\"timer\")) || 0);\n\n//     // const [isPaused, setIsPaused] = useState(localStorage.getItem(\"isPaused\") === \"true\" || false);\n\n//     // useEffect(() => {\n//     //     let interval;\n//     //     if (!isPaused) {\n//     //         interval = setInterval(() => {\n//     //             setTimer(prevTimer => prevTimer + 1);\n//     //             localStorage.setItem(\"timer\", (prevTimer + 1).toString());\n//     //         }, 1000);\n//     //     }\n//     //     return () => clearInterval(interval);\n//     // }, [isPaused]);\n\n//     // useEffect(() => {\n//     //     // Retrieve timer value from localStorage on page load\n\n//     // }, []); // Empty dependency array ensures this effect runs once on component mount\n\n//     // // ... rest of your timer logic\n\n//     return (\n//         <div className='main'>\n//             <div className='sub-main'>\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     <div>\n//                         <div className='subjects'>\n//                             <button className='subject-btn'>Mathematics</button>\n//                             <button className='subject-btn'>Physics</button>\n//                             <button className='subject-btn'>Chemistry</button>\n//                             {/* <div>Timer: {timer}</div>; */}\n//                         </div>\n//                         <div className='second-header'>\n//                             <div className='single-select-question'>\n//                                 Single Select Question\n//                             </div>\n//                             <div className='right-header'>\n//                                 <div className='marks'>\n//                                     Marks: <div className='plus-mark'>+1</div>\n//                                     <div className='minus-mark'>-1</div>\n//                                 </div>\n//                                 {/* <div className='timer'>\n//                                     <h3>Time Left: {formatTime(countdown)}</h3>\n//                                 </div> */}\n//                             </div>\n//                         </div>\n//                         <div className='question-no'>\n//                             <span className=\"active-question-no\">Question No. {addLeadingZero(currentQuestionIndex + 1)}</span>\n//                             <span className=\"total-question\"> of {addLeadingZero(Qimages.length)}</span>\n//                         </div>\n\n//                         <div className='options-container'>\n\n//                             <h2 className='question'>\n//                                 {currentQuestion ? (\n//                                  <div>\n//                                         <img\n//                                             src={questionImageSrc}\n//                                             alt={`QImage ${currentQuestionIndex + 1}`}\n//                                         />\n//                                         <ul className='options-container'>\n//                                             {/* ... (options rendering logic) */}\n//                                             {OPTimages\n//                                                 .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\n//                                                 .map((optImage, optIndex) => (\n\n//                                                     <li key={optIndex}>\n//                                                         <input\n//                                                         name='index'\n//                                                             type=\"radio\" \n//                                                           />\n//                                                         <label className='alpha-index'>\n//                                                             <img\n//                                                                 src={`data:image/png;base64,${optImage.image_data}`}\n//                                                                 alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                                             />\n//                                                         </label>\n//                                                     </li>\n//                                                 ))}\n//                                         </ul>\n//                                  </div>\n//                                 ) : (\n//                                     // <p>Loading question...</p>\n\n//                                  <div className='loading-gif'>\n//                                             <DotSpinner\n//                                                 size={90}\n//                                                 speed={0.9}\n//                                                 color=\"black\"\n\n//                                             />\n//                                  </div>\n\n//                                     // <Waveform\n//                                     //     size={40}\n//                                     //     lineWeight={3.5}\n//                                     //     speed={1}\n//                                     //     color=\"black\"\n//                                     // />\n//                                 )}\n\n// {/* \n//                                 <div onChange={tc}>Timer: {timer} seconds</div> */}\n//                             </h2>\n//                             {/* <ul className='options-container'>\n//                                 ... (options rendering logic)\n//                                 {OPTimages\n//                                     .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\n//                                     .map((optImage, optIndex) => (\n\n//                                         <li key={optIndex}>\n//                                             <input type=\"radio\" />\n//                                             <label className='alpha-index'>\n//                                                 <img\n//                                                     src={`data:image/png;base64,${optImage.image_data}`}\n//                                                     alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                                 />\n//                                             </label>\n//                                         </li>\n//                                     ))}\n//                             </ul> */}\n//                             {/* <button onClick={handleNextClick}>Next</button> */}\n//                         </div>\n//                         {/* a */}\n\n//                         <div className=\"flex-right\">\n//                             {/* <button className='clear-btn'>Mark for Review & Next</button>\n//                             <button className='clear-btn' onClick={clearResponse}>Clear Response</button>\n//                             <button className='previous-btn' onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\n//                                 <i class=\"fa-solid fa-angles-left\"></i>\n//                                 Previous\n//                             </button> */}\n//                             {/* <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\n//                                 {activeQuestion === questions.length - 1 ? 'Submit' : 'Save & Next'}<i class=\"fa-solid fa-angles-right\"></i>\n//                             </button> */}\n\n//                             <button onClick={handlepreClick}>Previous</button>\n\n//                             <button onClick={handleNextClick}>Save&Next</button>\n\n//                         </div>\n//                     </div>\n\n//                 </div>\n//             </div>\n\n//             <div className='rightsidebar'><RightSidebar /></div>\n//             {/* onQuestionSelect={handleQuestionSelect} answeredQuestions={answeredQuestions} */}\n\n//         </div>\n//     );\n// };\n\n// export default Paper;\n\nimport React, { useEffect, useState } from 'react';\nimport './Paper.css';\nimport { DotSpinner } from '@uiball/loaders';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Paper = () => {\n  _s();\n  const [Qimages, setQImages] = useState([]);\n  const [OPTimages, setOPTImages] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [timer, setTimer] = useState(0);\n  const [isPaused, setIsPaused] = useState(true);\n  useEffect(() => {\n    // Fetch Qimages and OPTimages data here (similar to your existing code)\n  }, []);\n  useEffect(() => {\n    let interval;\n    if (!isPaused) {\n      interval = setInterval(() => {\n        setTimer(prevTimer => prevTimer + 1);\n      }, 1000);\n    }\n    return () => clearInterval(interval);\n  }, [isPaused]);\n  const startTimer = () => {\n    setIsPaused(false);\n  };\n  const pauseTimer = () => {\n    setIsPaused(true);\n  };\n  const resetTimer = () => {\n    setTimer(0);\n  };\n  const handleNextClick = () => {\n    startTimer();\n    setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n    resetTimer();\n  };\n  const handlePreClick = () => {\n    startTimer();\n    setCurrentQuestionIndex(prevIndex => prevIndex - 1);\n  };\n  const currentQuestion = Qimages[currentQuestionIndex];\n  const questionImageSrc = currentQuestion ? `data:image/png;base64,${currentQuestion.image_data}` : '';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"options-container\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"question\",\n        children: currentQuestion ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: questionImageSrc,\n            alt: `QImage ${currentQuestionIndex + 1}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1220,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1218,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-gif\",\n          children: /*#__PURE__*/_jsxDEV(DotSpinner, {\n            size: 90,\n            speed: 0.9,\n            color: \"black\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1226,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1225,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1216,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1215,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-right\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePreClick,\n        disabled: currentQuestionIndex === 0,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1233,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: pauseTimer,\n        children: \"Pause\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1236,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextClick,\n        disabled: currentQuestionIndex === Qimages.length - 1,\n        children: \"Save & Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1237,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1232,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Timer: \", timer, \" seconds\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1242,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1213,\n    columnNumber: 9\n  }, this);\n};\n_s(Paper, \"N5K6+NLpqU5NRPiD6CwVokZ7qdg=\");\n_c = Paper;\nexport default Paper;\nvar _c;\n$RefreshReg$(_c, \"Paper\");","map":{"version":3,"names":["React","useEffect","useState","DotSpinner","jsxDEV","_jsxDEV","Paper","_s","Qimages","setQImages","OPTimages","setOPTImages","currentQuestionIndex","setCurrentQuestionIndex","timer","setTimer","isPaused","setIsPaused","interval","setInterval","prevTimer","clearInterval","startTimer","pauseTimer","resetTimer","handleNextClick","prevIndex","handlePreClick","currentQuestion","questionImageSrc","image_data","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","size","speed","color","onClick","disabled","length","_c","$RefreshReg$"],"sources":["/home/user/Documents/Daily work/october/24-10-2023/Latest-Quiz-App/quiz_app/front-end/src/Pages/Paper/Paper.jsx"],"sourcesContent":["// test commit\n\n\n// import React, { useEffect, useState } from 'react';\n// import quiz from '../../Data/quesAns'\n// import './Paper.css'\n// import RightSidebar from '../../Components/RightSidebar/RightSidebar';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader'\n\n\n// // Defining Timer code \n// const formatTime = (time) => {\n//     let minutes = Math.floor(time / 60);\n//     let seconds = Math.floor(time - minutes * 60);\n\n//     if (minutes < 10) minutes = '0' + minutes;\n//     if (seconds < 10) seconds = '0' + seconds;\n//     return minutes + ':' + seconds;\n// }; // End of Defining Timer code \n\n\n\n// const Paper = ({ seconds, answeredQuestions }) => {\n\n//     const [activeQuestion, setActiveQuestion] = useState(0);\n//     const handleQuestionSelect = (questionNumber) => {\n//         setActiveQuestion(questionNumber - 1);\n//     }\n\n//     // const [questionStatus, setQuestionStatus] = useState(Array(30).fill('notAnswered'))\n//     // const [activeQuestion, setActiveQuestion] = useState(0)\n//     // const [selectedAnswer, setSelectedAnswer] = useState('') \n\n//     const [selectedAnswers, setSelectedAnswers] = useState(new Array(quiz.questions.length).fill(''));\n//     const [showResult, setShowResult] = useState(false)\n//     const [result, setResult] = useState({\n//         score: 0,\n//         correctAnswers: 0,\n//         wrongAnswers: 0,\n//     })\n\n\n\n//     const { questions } = quiz\n//     const { question, choices, correctAnswer } = questions[activeQuestion]\n//     const onClickNext = () => {\n//         setResult((prev) =>\n//             selectedAnswers[activeQuestion] === correctAnswer\n//                 ? {\n//                     ...prev,\n//                     score: prev.score + 5,\n//                     correctAnswers: prev.correctAnswers + 1,\n//                 }\n//                 : { ...prev, wrongAnswers: prev.wrongAnswers + 1 }\n//         );\n//         if (activeQuestion !== questions.length - 1) {\n//             setActiveQuestion((prev) => prev + 1);\n//         } else {\n//             // setActiveQuestion(0);\n//             setShowResult(true);\n//             calculateResult();//new added code\n//         }\n//     };\n\n\n//     const onAnswerSelected = (OptionLetter) => {\n//         // Update the selected answer for the current question\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = OptionLetter;\n//         setSelectedAnswers(updatedSelectedAnswers);\n//         // setSelectedAnswers(updatedSelectedAnswers, OptionLetter);\n\n//     };\n\n\n\n//     const clearResponse = () => {\n//         // Clear the response for the current question\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = '';\n//         setSelectedAnswers(updatedSelectedAnswers);\n//     };\n\n//     const goToPreviousQuestion = () => {\n//         // Move to the previous question\n//         if (activeQuestion > 0) {\n//             setActiveQuestion((prev) => prev - 1);\n//         }\n//     };\n\n\n\n//     const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\n//     const [countdown, setCountDown] = useState(seconds);\n//     useEffect(() => {\n//         const timerId = setInterval(() => {\n//             setCountDown((prevCountDown) =>\n//                 prevCountDown - 1\n//             );\n//         }, 1000)\n//         return () => {\n//             clearInterval(timerId);\n//         };\n//     }, [])\n\n//     useEffect(() => {\n//         if (countdown <= 0) {\n//             setShowResult(true);\n//             // clearInterval(timerId.current);\n//             // alert(\"End\");\n//         }\n//     }, [countdown]);\n\n\n//    // NEW ADDED CODE\n\n//     // const [showResult, setShowResult] = useState(false);\n//     const [accuracy, setAccuracy] = useState(0);\n//     const [averageScore, setAverageScore] = useState(0);\n//     const [topScore, setTopScore] = useState(0);\n//     const [liveRank, setLiveRank] = useState(0);\n\n//     const calculateResult = () => {\n//         // Calculate accuracy\n//         const totalAttempted = answeredQuestions.length;\n//         const totalCorrect = result.correctAnswers;\n//         const calculatedAccuracy = (totalCorrect / totalAttempted) * 100;\n//         setAccuracy(calculatedAccuracy.toFixed(2));\n\n//         // Calculate average score\n//         const calculatedAverageScore = result.score / totalAttempted;\n//         setAverageScore(calculatedAverageScore.toFixed(2));\n\n//         // Placeholder for live ranking data - Replace this with actual data\n//         const calculatedTopScore = 100;\n//         const calculatedLiveRank = 1;\n\n//         setTopScore(calculatedTopScore);\n//         setLiveRank(calculatedLiveRank);\n//     };\n\n//     // const onClickSubmit = () => {\n//     //     calculateResult();\n//     //     setShowResult(true);\n//     // };\n\n\n\n\n\n\n\n\n\n//     return (\n\n//         <div className='main'>\n//             <div className='sub-main'>\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     {!showResult ? (\n//                         <div>\n//                             <div className='subjects'>\n//                                 <button className='subject-btn'>Mathematics</button>\n//                                 <button className='subject-btn'>Physics</button>\n//                                 <button className='subject-btn'>Chemistry</button>\n//                             </div>\n//                             <div className='second-header'>\n//                                 <div className='single-select-question'>\n//                                     Single Select Question\n//                                 </div>\n//                                 <div className='right-header'>\n//                                     <div className='marks'>\n//                                         Marks: <div className='plus-mark'>+1</div>\n//                                         <div className='minus-mark'>-1</div>\n//                                     </div>\n//                                     <div className='timer'>\n//                                         <h3>Time Left: {formatTime(countdown)}</h3>\n//                                     </div>\n//                                 </div>\n//                             </div>\n//                             <div className='question-no'>\n//                                 <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\n//                                 <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\n//                             </div>\n\n//                             <h2 className='question'><img src={question} alt=\"question\" /></h2>\n\n//                             <ul className='options-container'>\n//                                 {choices.map((answer, index) => (\n//                                     <li key={answer}>\n//                                         <input type=\"radio\"\n//                                             // id={answer}\n//                                             id={`option-${index}`}\n//                                             name='answer'\n//                                             value={answer}\n//                                             checked={selectedAnswers[activeQuestion] === answer}\n//                                             onChange={() => onAnswerSelected(answer)} />\n\n\n//                                         <label className='alpha-index' htmlFor={`option-${index}`}>\n//                                             {/* htmlFor={answer} */}\n//                                             {String.fromCharCode(65 + index)}.\n//                                             <img src={answer} alt=\"answer\" />\n//                                         </label>\n//                                     </li>\n//                                 ))}\n//                             </ul>\n\n//                             <div className=\"flex-right\">\n//                                 <button className='clear-btn'>Mark for Review & Next</button>\n//                                 <button className='clear-btn' onClick={clearResponse}>Clear Response</button>\n//                                 <button className='previous-btn' onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\n//                                     <i class=\"fa-solid fa-angles-left\"></i>\n//                                     Previous\n//                                 </button>\n//                                 <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\n//                                     {activeQuestion === questions.length - 1 ? 'Submit' : 'Save & Next'}<i class=\"fa-solid fa-angles-right\"></i>\n//                                 </button>\n\n//                             </div>\n//                         </div>\n//                     ) : (\n//                         <div className=\"result\">\n//                             <h3>Result</h3>\n//                             <p>\n//                                 Total Questions: <span>{questions.length}</span>\n//                             </p>\n//                             <p>\n//                                 Total Score:<span> {result.score}</span>\n//                             </p>\n//                             <p>\n//                                 Correct Answers:<span> {result.correctAnswers}</span>\n//                             </p>\n//                             <p>\n//                                 Wrong Answers:<span> {result.wrongAnswers}</span>\n//                             </p>\n//                             <p>\n//                                 Accuracy:<span> {accuracy}%</span>\n//                             </p>\n//                             <p>\n//                                 Average Score:<span> {averageScore}</span>\n//                             </p>\n//                             <p>\n//                                 Top Score:<span> {topScore}</span>\n//                             </p>\n//                             <p>\n//                                 Live Rank:<span> {liveRank}</span>\n//                             </p>\n//                         </div>\n//                     )}\n//                 </div>\n//             </div>\n//             <div className='rightsidebar'><RightSidebar onQuestionSelect={handleQuestionSelect} answeredQuestions={answeredQuestions} /></div>\n//         </div>\n\n\n//     )\n// }\n\n// export default Paper\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useEffect, useState } from 'react';\n// // import quiz from '../../Data/quesAns'\n// import './Paper.css'\n// // import RightSidebar from '../../Components/RightSidebar/RightSidebar';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader'\n\n\n// // Defining Timer code \n// // const formatTime = (time) => {\n// //     let minutes = Math.floor(time / 60);\n// //     let seconds = Math.floor(time - minutes * 60);\n\n// //     if (minutes < 10) minutes = '0' + minutes;\n// //     if (seconds < 10) seconds = '0' + seconds;\n// //     return minutes + ':' + seconds;\n// // }; // End of Defining Timer code \n\n\n\n// const Paper = () => {\n\n//     // const [activeQuestion, setActiveQuestion] = useState(0);\n//     // const handleQuestionSelect = (questionNumber) => {\n//     //     setActiveQuestion(questionNumber - 1);\n//     // }\n\n//     // const [questionStatus, setQuestionStatus] = useState(Array(30).fill('notAnswered'))\n//     // const [activeQuestion, setActiveQuestion] = useState(0)\n//     // const [selectedAnswer, setSelectedAnswer] = useState('') \n\n//     // const [selectedAnswers, setSelectedAnswers] = useState(new Array(quiz.questions.length).fill(''));\n//     // const [showResult, setShowResult] = useState(false)\n//     // const [result, setResult] = useState({\n//     //     score: 0,\n//     //     correctAnswers: 0,\n//     //     wrongAnswers: 0,\n//     // })\n\n   \n\n//     // const { questions } = quiz\n//     // const { Qimages, OPTimages, correctAnswer } = [activeQuestion]\n//     // const onClickNext = () => {\n//     //     setResult((prev) =>\n//     //         selectedAnswers[activeQuestion] === correctAnswer\n//     //             ? {\n//     //                 ...prev,\n//     //                 score: prev.score + 5,\n//     //                 correctAnswers: prev.correctAnswers + 1,\n//     //             }\n//     //             : { ...prev, wrongAnswers: prev.wrongAnswers + 1 }\n//     //     );\n//     //     if (activeQuestion !== questions.length - 1) {\n//     //         setActiveQuestion((prev) => prev + 1);\n//     //     } else {\n//     //         // setActiveQuestion(0);\n//     //         setShowResult(true);\n//     //         calculateResult();//new added code\n//     //     }\n//     // };\n\n\n//     // const onAnswerSelected = (OptionLetter) => {\n//     //     // Update the selected answer for the current question\n//     //     const updatedSelectedAnswers = [...selectedAnswers];\n//     //     updatedSelectedAnswers[activeQuestion] = OptionLetter;\n//     //     setSelectedAnswers(updatedSelectedAnswers);\n//     //     // setSelectedAnswers(updatedSelectedAnswers, OptionLetter);\n\n//     // };\n\n\n\n//     // const clearResponse = () => {\n//     //     // Clear the response for the current question\n//     //     const updatedSelectedAnswers = [...selectedAnswers];\n//     //     updatedSelectedAnswers[activeQuestion] = '';\n//     //     setSelectedAnswers(updatedSelectedAnswers);\n//     // };\n\n//     // const goToPreviousQuestion = () => {\n//     //     // Move to the previous question\n//     //     if (activeQuestion > 0) {\n//     //         setActiveQuestion((prev) => prev - 1);\n//     //     }\n//     // };\n\n\n\n//     // const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\n//     // const [countdown, setCountDown] = useState(seconds);\n//     // useEffect(() => {\n//     //     const timerId = setInterval(() => {\n//     //         setCountDown((prevCountDown) =>\n//     //             prevCountDown - 1\n//     //         );\n//     //     }, 1000)\n//     //     return () => {\n//     //         clearInterval(timerId);\n//     //     };\n//     // }, [])\n\n//     // useEffect(() => {\n//     //     if (countdown <= 0) {\n//     //         setShowResult(true);\n//     //         // clearInterval(timerId.current);\n//     //         // alert(\"End\");\n//     //     }\n//     // }, [countdown]);\n\n\n//     // NEW ADDED CODE\n\n//     // const [showResult, setShowResult] = useState(false);\n//     // const [accuracy, setAccuracy] = useState(0);\n//     // const [averageScore, setAverageScore] = useState(0);\n//     // const [topScore, setTopScore] = useState(0);\n//     // const [liveRank, setLiveRank] = useState(0);\n\n//     // const calculateResult = () => {\n//     //     // Calculate accuracy\n//     //     const totalAttempted = answeredQuestions.length;\n//     //     const totalCorrect = result.correctAnswers;\n//     //     const calculatedAccuracy = (totalCorrect / totalAttempted) * 100;\n//     //     setAccuracy(calculatedAccuracy.toFixed(2));\n\n//     //     // Calculate average score\n//     //     const calculatedAverageScore = result.score / totalAttempted;\n//     //     setAverageScore(calculatedAverageScore.toFixed(2));\n\n//     //     // Placeholder for live ranking data - Replace this with actual data\n//     //     const calculatedTopScore = 100;\n//     //     const calculatedLiveRank = 1;\n\n//     //     setTopScore(calculatedTopScore);\n//     //     setLiveRank(calculatedLiveRank);\n//     // };\n\n//     // const onClickSubmit = () => {\n//     //     calculateResult();\n//     //     setShowResult(true);\n//     // };\n\n\n//     const [Qimages,setQImages] = useState([]);\n//     const [OPTimages,setOPTImages] = useState([]);\n\n//     useEffect(() => {\n//         // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n//         const fetchQImages = async () => {\n//             let fetchedQImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     const response = await fetch(`http://localhost:7000/images/${i}`);\n//                     const data = await response.json();\n//                     if (data.length > 0) {\n//                         fetchedQImages.push(data[0]); // Add only the first image from each set\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching Qimages:', error);\n//                 }\n//             }\n\n//             setQImages(fetchedQImages);\n//         };\n\n//         // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n//         const fetchOPTImages = async () => {\n//             let fetchedOPTImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     for (let j = i + 1; j <= i + 4; j++) {\n//                         const response = await fetch(`http://localhost:7000/images/${j}`);\n//                         const data = await response.json();\n//                         if (data.length > 0) {\n//                             fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n//                         }\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching OPTimages:', error);\n//                 }\n//             }\n\n//             setOPTImages(fetchedOPTImages);\n//         };\n\n//         fetchQImages();\n//         fetchOPTImages();\n//     }, []); // Empty dependency array to fetch data only once when the component mounts\n\n\n\n\n\n\n\n\n//     return (\n\n//         <div className='main'>\n//             <div className='sub-main'>\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     {/* {!showResult ? ( */}\n//                         <div>\n//                             <div className='subjects'>\n//                                 <button className='subject-btn'>Mathematics</button>\n//                                 <button className='subject-btn'>Physics</button>\n//                                 <button className='subject-btn'>Chemistry</button>\n//                             </div>\n//                             <div className='second-header'>\n//                                 <div className='single-select-question'>\n//                                     Single Select Question\n//                                 </div>\n//                                 {/* <div className='right-header'>\n//                                     <div className='marks'>\n//                                         Marks: <div className='plus-mark'>+1</div>\n//                                         <div className='minus-mark'>-1</div>\n//                                     </div>\n//                                     <div className='timer'>\n//                                         <h3>Time Left: {formatTime(countdown)}</h3>\n//                                     </div>\n//                                 </div> */}\n//                             </div>\n//                             {/* <div className='question-no'>\n//                                 <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\n//                                 <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\n//                             </div> */}\n\n                           \n\n\n\n//                             {Qimages.map((qImage, index) => (\n//                                 <div key={index}>\n//                                     {/* <h2>QImage {index + 1}</h2> */}\n//                                     {/* <div className='question-no'>\n//                                         <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\n//                                         <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\n//                                     </div> */}\n//                                     <h2 className='question'> <img\n//                                         src={`data:image/png;base64,${qImage.image_data}`}\n//                                         alt={`QImage ${index + 1}`}\n//                                     /></h2>\n                              \n//                                     <ul className='options-container'>\n//                                         {OPTimages.slice(index * 4, index * 4 + 4).map((optImage, optIndex) => (\n//                                             <li>\n//                                                 <input type=\"radio\"\n//                                                 // // id={answer}\n//                                                 //     id={`option-${index}`}\n//                                                 //     name='answer'\n//                                                 //     value={optImage}\n//                                                 //     checked={selectedAnswers[activeQuestion] === optImage}\n//                                                 //     onChange={() => onAnswerSelected(optImage)} \n//                                                 />\n\n\n//                                                 <label className='alpha-index' >\n//                                                     <img\n//                                                         key={optIndex}\n//                                                         src={`data:image/png;base64,${optImage.image_data}`}\n//                                                         alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                                     />\n//                                                 </label>\n//                                             </li>\n//                                         ))}\n//                                     </ul>\n//                                 </div>\n//                             ))}\n\n\n\n//                             {/* <div className=\"flex-right\">\n//                                 <button className='clear-btn'>Mark for Review & Next</button>\n//                                 <button className='clear-btn' onClick={clearResponse}>Clear Response</button>\n//                                 <button className='previous-btn' onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\n//                                     <i class=\"fa-solid fa-angles-left\"></i>\n//                                     Previous\n//                                 </button>\n//                                 <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\n//                                     {activeQuestion === questions.length - 1 ? 'Submit' : 'Save & Next'}<i class=\"fa-solid fa-angles-right\"></i>\n//                                 </button>\n\n//                             </div> */}\n//                         </div>\n//                     {/* ) : ( */}\n//                         {/* <div className=\"result\"> */}\n//                             {/* <h3>Result</h3>\n//                             <p>\n//                                 Total Questions: <span>{questions.length}</span>\n//                             </p>\n//                             <p>\n//                                 Total Score:<span> {result.score}</span>\n//                             </p>\n//                             <p>\n//                                 Correct Answers:<span> {result.correctAnswers}</span>\n//                             </p>\n//                             <p>\n//                                 Wrong Answers:<span> {result.wrongAnswers}</span>\n//                             </p>\n//                             <p>\n//                                 Accuracy:<span> {accuracy}%</span>\n//                             </p>\n//                             <p>\n//                                 Average Score:<span> {averageScore}</span>\n//                             </p>\n//                             <p>\n//                                 Top Score:<span> {topScore}</span>\n//                             </p>\n//                             <p>\n//                                 Live Rank:<span> {liveRank}</span>\n//                             </p> */}\n//                         {/* </div> */}\n//                     {/* )} */}\n//                 </div>\n//             </div>\n//             {/* <div className='rightsidebar'><RightSidebar onQuestionSelect={handleQuestionSelect} answeredQuestions={answeredQuestions} /></div> */}\n//         </div>\n\n\n//     )\n// }\n\n// export default Paper\n\n// import React, { useEffect, useState } from 'react';\n// import './Paper.css';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader';\n\n// const Paper = () => {\n//     const [Qimages, setQImages] = useState([]);\n//     const [OPTimages, setOPTImages] = useState([]);\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n\n   \n\n//         useEffect(() => {\n//             // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n//             const fetchQImages = async () => {\n//                 let fetchedQImages = [];\n\n//                 for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                     try {\n//                         const response = await fetch(`http://localhost:7000/images/${i}`);\n//                         const data = await response.json();\n//                         if (data.length > 0) {\n//                             fetchedQImages.push(data[0]); // Add only the first image from each set\n//                         }\n//                     } catch (error) {\n//                         console.error('Error fetching Qimages:', error);\n//                     }\n//                 }\n\n//                 setQImages(fetchedQImages);\n//             };\n\n//             // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n//             const fetchOPTImages = async () => {\n//                 let fetchedOPTImages = [];\n\n//                 for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                     try {\n//                         for (let j = i + 1; j <= i + 4; j++) {\n//                             const response = await fetch(`http://localhost:7000/images/${j}`);\n//                             const data = await response.json();\n//                             if (data.length > 0) {\n//                                 fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n//                             }\n//                         }\n//                     } catch (error) {\n//                         console.error('Error fetching OPTimages:', error);\n//                     }\n//                 }\n\n//                 setOPTImages(fetchedOPTImages);\n//             };\n\n//             fetchQImages();\n//             fetchOPTImages();\n//         }, []); // Empty dependency array to fetch data only once when the component mounts\n\n\n   \n\n//     const handleNextClick = () => {\n//         // Move to the next question when the \"Next\" button is clicked\n//         setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n//     };\n\n//     return (\n//         <div className='main'>\n//             {/* ... */}\n//             <div><PaperHeader /></div>\n//             <div className='options-container'>\n//                 {/* Display only the current question and its options */}\n//                 <h2 className='question'>\n//                     <img\n//                         src={`data:image/png;base64,${Qimages[currentQuestionIndex].image_data}`}\n//                         alt={`QImage ${currentQuestionIndex + 1}`}\n//                     />\n//                 </h2>\n//                 <ul className='options-container'>\n//                     {OPTimages\n//                         .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\n//                         .map((optImage, optIndex) => (\n//                             <li key={optIndex}>\n//                                 <input type=\"radio\" />\n//                                 <label className='alpha-index'>\n//                                     <img\n//                                         src={`data:image/png;base64,${optImage.image_data}`}\n//                                         alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                     />\n//                                 </label>\n//                             </li>\n//                         ))}\n//                 </ul>\n//                 <button onClick={handleNextClick}>Next</button>\n//             </div>\n//             {/* ... */}\n//         </div>\n//     );\n// };\n\n// export default Paper;\n\n\n\n// import React, { useEffect, useState } from 'react';\n// import './Paper.css';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader';\n// // import { Waveform } from '@uiball/loaders'\n\n\n\n\n// const Paper = () => {\n\n//     const [Qimages, setQImages] = useState([]);\n//     const [OPTimages, setOPTImages] = useState([]);\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n\n\n\n//     useEffect(() => {\n//         // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n//         const fetchQImages = async () => {\n//             let fetchedQImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     const response = await fetch(`http://localhost:7001/images/${i}`);\n//                     const data = await response.json();\n//                     if (data.length > 0) {\n//                         fetchedQImages.push(data[0]); // Add only the first image from each set\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching Qimages:', error);\n//                 }\n//             }\n\n//             setQImages(fetchedQImages);\n//         };\n\n\n//         // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n//         const fetchOPTImages = async () => {\n//             let fetchedOPTImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     for (let j = i + 1; j <= i + 4; j++) {\n//                         const response = await fetch(`http://localhost:7001/images/${j}`);\n//                         const data = await response.json();\n//                         if (data.length > 0) {\n//                             fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n//                         }\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching OPTimages:', error);\n//                 }\n//             }\n\n//             setOPTImages(fetchedOPTImages);\n//         };\n\n//         fetchQImages();\n//         fetchOPTImages();\n//     }, []); // Empty dependency array to fetch data only once when the component mounts\n\n\n\n\n//     const handleNextClick = () => {\n//         // Move to the next question when the \"Next\" button is clicked\n//         setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n//     };\n\n\n//     // Check if Qimages[currentQuestionIndex] is defined before accessing its properties\n//     const currentQuestion = Qimages[currentQuestionIndex];\n//     const questionImageSrc = currentQuestion ? `data:image/png;base64,${currentQuestion.image_data}` : '';\n\n\n//     return (\n//         <div className='main'>\n//             <div className='sub-main'>\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     <div className='options-container'>\n//                         <h2 className='question'>\n//                             {currentQuestion ? (\n//                                 <img\n//                                     src={questionImageSrc}\n//                                     alt={`QImage ${currentQuestionIndex + 1}`}\n//                                 />\n//                             ) : (\n//                                 <p>Loading question...</p>\n                                 \n\n//                             // <Waveform\n//                             //     size={40}\n//                             //     lineWeight={3.5}\n//                             //     speed={1}\n//                             //     color=\"black\"\n//                             // />\n//                             )}\n//                         </h2>\n//                         <ul className='options-container'>\n//                             {/* ... (options rendering logic) */}\n//                             {OPTimages\n//                                 .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\n//                                 .map((optImage, optIndex) => (\n                                    \n//                                     <li key={optIndex}>\n//                                         <input type=\"radio\" />\n//                                         <label className='alpha-index'>\n//                                             <img\n//                                                 src={`data:image/png;base64,${optImage.image_data}`}\n//                                                 alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                             />\n//                                         </label>\n//                                     </li>\n//                                 ))}\n//                         </ul>\n//                         <button onClick={handleNextClick}>Next</button>\n//                     </div>\n\n//                 </div>\n//             </div>\n\n           \n            \n//             {/* ... */}\n//         </div>\n//     );\n// };\n\n// export default Paper;\n\n\n\n\n\n\n// import React, { useEffect, useState } from 'react';\n// import './Paper.css';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader';\n// // import { Waveform } from '@uiball/loaders'\n// import RightSidebar from '../../Components/RightSidebar/RightSidebar';\n// import { DotSpinner } from '@uiball/loaders'\n\n\n// const Paper = () => {\n\n//     const [Qimages, setQImages] = useState([]);\n//     const [OPTimages, setOPTImages] = useState([]);\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n//     // const [tc,setTc]=useState(\"\")\n//     // const [selectedAnswers, setSelectedAnswers] = useState(new Array(Qimages.questions.length).fill(''));\n\n   \n\n//     useEffect(() => {\n//         // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n//         const fetchQImages = async () => {\n//             let fetchedQImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     const response = await fetch(`http://localhost:7002/images/${i}`);\n//                     const data = await response.json();\n//                     if (data.length > 0) {\n//                         fetchedQImages.push(data[0]); // Add only the first image from each set\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching Qimages:', error);\n//                 }\n//             }\n\n//             setQImages(fetchedQImages);\n//         };\n\n\n//         // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n//         const fetchOPTImages = async () => {\n//             let fetchedOPTImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     for (let j = i + 1; j <= i + 4; j++) {\n//                         const response = await fetch(`http://localhost:7002/images/${j}`);\n//                         const data = await response.json();\n//                         if (data.length > 0) {\n//                             fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n//                         }\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching OPTimages:', error);\n//                 }\n//             }\n\n//             setOPTImages(fetchedOPTImages);\n//         };\n\n//         fetchQImages();\n//         fetchOPTImages();\n//     }, []); // Empty dependency array to fetch data only once when the component mounts\n\n\n\n\n//     const handleNextClick = () => {\n//         // Move to the next question when the \"Next\" button is clicked\n//         setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n//         setTimer(0);\n//     };\n\n//     const handlepreClick=()=>{\n//         setCurrentQuestionIndex(prevIndex => prevIndex - 1);\n//         // setTimer(timer)\n\n//     }\n//     // const [timer, setTimer] = useState(0);\n//     // useEffect(() => {\n//     //     let interval;                // Start the timer\n\n//     //     interval = setInterval(() => {\n//     //         setTimer(prevTimer => prevTimer + 1);\n//     //     }, 1000);\n\n//     //     // Clear the interval when the component unmounts\n\n//     //     return () => {\n\n//     //         clearInterval(interval);\n\n//     //     };\n\n//     // }, []); // Empty dependency array ensures the effect runs once after the initial render\n\n\n//     // const onAnswerSelected = (OptionLetter) => {\n//     //     // Update the selected answer for the current question\n//     //     const updatedSelectedAnswers = [...selectedAnswers];\n//     //     updatedSelectedAnswers[currentQuestionIndex] = OptionLetter;\n//     //     setSelectedAnswers(updatedSelectedAnswers);\n//     //     // setSelectedAnswers(updatedSelectedAnswers, OptionLetter);\n\n//     // };\n\n//     // Check if Qimages[currentQuestionIndex] is defined before accessing its properties\n//     const currentQuestion = Qimages[currentQuestionIndex];\n//     const questionImageSrc = currentQuestion ? `data:image/png;base64,${currentQuestion.image_data}` : '';\n\n//     const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\n\n\n\n\n \n\n\n\n//     // const [timer, setTimer] = useState(parseInt(localStorage.getItem(\"timer\")) || 0);\n\n//     // const [isPaused, setIsPaused] = useState(localStorage.getItem(\"isPaused\") === \"true\" || false);\n\n//     // useEffect(() => {\n//     //     let interval;\n//     //     if (!isPaused) {\n//     //         interval = setInterval(() => {\n//     //             setTimer(prevTimer => prevTimer + 1);\n//     //             localStorage.setItem(\"timer\", (prevTimer + 1).toString());\n//     //         }, 1000);\n//     //     }\n//     //     return () => clearInterval(interval);\n//     // }, [isPaused]);\n\n\n\n//     // useEffect(() => {\n//     //     // Retrieve timer value from localStorage on page load\n        \n//     // }, []); // Empty dependency array ensures this effect runs once on component mount\n\n//     // // ... rest of your timer logic\n\n\n\n\n\n//     return (\n//         <div className='main'>\n//             <div className='sub-main'>\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     <div>\n//                         <div className='subjects'>\n//                             <button className='subject-btn'>Mathematics</button>\n//                             <button className='subject-btn'>Physics</button>\n//                             <button className='subject-btn'>Chemistry</button>\n//                             {/* <div>Timer: {timer}</div>; */}\n//                         </div>\n//                         <div className='second-header'>\n//                             <div className='single-select-question'>\n//                                 Single Select Question\n//                             </div>\n//                             <div className='right-header'>\n//                                 <div className='marks'>\n//                                     Marks: <div className='plus-mark'>+1</div>\n//                                     <div className='minus-mark'>-1</div>\n//                                 </div>\n//                                 {/* <div className='timer'>\n//                                     <h3>Time Left: {formatTime(countdown)}</h3>\n//                                 </div> */}\n//                             </div>\n//                         </div>\n//                         <div className='question-no'>\n//                             <span className=\"active-question-no\">Question No. {addLeadingZero(currentQuestionIndex + 1)}</span>\n//                             <span className=\"total-question\"> of {addLeadingZero(Qimages.length)}</span>\n//                         </div>\n\n\n//                         <div className='options-container'>\n\n                            \n//                             <h2 className='question'>\n//                                 {currentQuestion ? (\n//                                  <div>\n//                                         <img\n//                                             src={questionImageSrc}\n//                                             alt={`QImage ${currentQuestionIndex + 1}`}\n//                                         />\n//                                         <ul className='options-container'>\n//                                             {/* ... (options rendering logic) */}\n//                                             {OPTimages\n//                                                 .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\n//                                                 .map((optImage, optIndex) => (\n\n//                                                     <li key={optIndex}>\n//                                                         <input\n//                                                         name='index'\n//                                                             type=\"radio\" \n//                                                           />\n//                                                         <label className='alpha-index'>\n//                                                             <img\n//                                                                 src={`data:image/png;base64,${optImage.image_data}`}\n//                                                                 alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                                             />\n//                                                         </label>\n//                                                     </li>\n//                                                 ))}\n//                                         </ul>\n//                                  </div>\n//                                 ) : (\n//                                     // <p>Loading question...</p>\n                                  \n\n//                                  <div className='loading-gif'>\n//                                             <DotSpinner\n//                                                 size={90}\n//                                                 speed={0.9}\n//                                                 color=\"black\"\n                                                \n//                                             />\n//                                  </div>\n\n//                                     // <Waveform\n//                                     //     size={40}\n//                                     //     lineWeight={3.5}\n//                                     //     speed={1}\n//                                     //     color=\"black\"\n//                                     // />\n//                                 )}\n\n\n// {/* \n//                                 <div onChange={tc}>Timer: {timer} seconds</div> */}\n//                             </h2>\n//                             {/* <ul className='options-container'>\n//                                 ... (options rendering logic)\n//                                 {OPTimages\n//                                     .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\n//                                     .map((optImage, optIndex) => (\n\n//                                         <li key={optIndex}>\n//                                             <input type=\"radio\" />\n//                                             <label className='alpha-index'>\n//                                                 <img\n//                                                     src={`data:image/png;base64,${optImage.image_data}`}\n//                                                     alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                                 />\n//                                             </label>\n//                                         </li>\n//                                     ))}\n//                             </ul> */}\n//                             {/* <button onClick={handleNextClick}>Next</button> */}\n//                         </div>\n//                         {/* a */}\n\n//                         <div className=\"flex-right\">\n//                             {/* <button className='clear-btn'>Mark for Review & Next</button>\n//                             <button className='clear-btn' onClick={clearResponse}>Clear Response</button>\n//                             <button className='previous-btn' onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\n//                                 <i class=\"fa-solid fa-angles-left\"></i>\n//                                 Previous\n//                             </button> */}\n//                             {/* <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\n//                                 {activeQuestion === questions.length - 1 ? 'Submit' : 'Save & Next'}<i class=\"fa-solid fa-angles-right\"></i>\n//                             </button> */}\n\n//                             <button onClick={handlepreClick}>Previous</button>\n\n//                             <button onClick={handleNextClick}>Save&Next</button>\n\n//                         </div>\n//                     </div>\n\n\n//                 </div>\n//             </div>\n\n//             <div className='rightsidebar'><RightSidebar /></div>\n//             {/* onQuestionSelect={handleQuestionSelect} answeredQuestions={answeredQuestions} */}\n\n\n//         </div>\n//     );\n// };\n\n// export default Paper;\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport React, { useEffect, useState } from 'react';\nimport './Paper.css';\nimport { DotSpinner } from '@uiball/loaders';\n\nconst Paper = () => {\n    const [Qimages, setQImages] = useState([]);\n    const [OPTimages, setOPTImages] = useState([]);\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n    const [timer, setTimer] = useState(0);\n    const [isPaused, setIsPaused] = useState(true);\n\n    useEffect(() => {\n        // Fetch Qimages and OPTimages data here (similar to your existing code)\n    }, []);\n\n    useEffect(() => {\n        let interval;\n\n        if (!isPaused) {\n            interval = setInterval(() => {\n                setTimer(prevTimer => prevTimer + 1);\n            }, 1000);\n        }\n\n        return () => clearInterval(interval);\n    }, [isPaused]);\n\n    const startTimer = () => {\n        setIsPaused(false);\n    };\n\n    const pauseTimer = () => {\n        setIsPaused(true);\n    };\n\n    const resetTimer = () => {\n        setTimer(0);\n    };\n\n    const handleNextClick = () => {\n        startTimer();\n        setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n        resetTimer();\n    };\n\n    const handlePreClick = () => {\n        startTimer();\n        setCurrentQuestionIndex(prevIndex => prevIndex - 1);\n    };\n\n    const currentQuestion = Qimages[currentQuestionIndex];\n    const questionImageSrc = currentQuestion ? `data:image/png;base64,${currentQuestion.image_data}` : '';\n\n    return (\n        <div className='main'>\n            {/* ... (your existing JSX) */}\n            <div className='options-container'>\n                <h2 className='question'>\n                    {currentQuestion ? (\n                        <div>\n                            {/* Display question image */}\n                            <img src={questionImageSrc} alt={`QImage ${currentQuestionIndex + 1}`} />\n\n                            {/* Display options (similar to your existing code) */}\n                        </div>\n                    ) : (\n                        <div className='loading-gif'>\n                            <DotSpinner size={90} speed={0.9} color='black' />\n                        </div>\n                    )}\n                </h2>\n            </div>\n\n            <div className='flex-right'>\n                <button onClick={handlePreClick} disabled={currentQuestionIndex === 0}>\n                    Previous\n                </button>\n                <button onClick={pauseTimer}>Pause</button>\n                <button onClick={handleNextClick} disabled={currentQuestionIndex === Qimages.length - 1}>\n                    Save & Next\n                </button>\n            </div>\n\n            <div>Timer: {timer} seconds</div>\n        </div>\n    );\n};\n\nexport default Paper;\n\n\n"],"mappings":";;AAAA;;AAGA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAIA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAUA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;;AA+BA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAIA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AASA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAKA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;;AAKA;;AAEA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAKA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;;AAEA;;AAOA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AASA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAEA;;AAEA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAGA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;;AAEA;;AAcA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,aAAa;AACpB,SAASC,UAAU,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACU,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EACnE,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACZ;EAAA,CACH,EAAE,EAAE,CAAC;EAENA,SAAS,CAAC,MAAM;IACZ,IAAIiB,QAAQ;IAEZ,IAAI,CAACF,QAAQ,EAAE;MACXE,QAAQ,GAAGC,WAAW,CAAC,MAAM;QACzBJ,QAAQ,CAACK,SAAS,IAAIA,SAAS,GAAG,CAAC,CAAC;MACxC,CAAC,EAAE,IAAI,CAAC;IACZ;IAEA,OAAO,MAAMC,aAAa,CAACH,QAAQ,CAAC;EACxC,CAAC,EAAE,CAACF,QAAQ,CAAC,CAAC;EAEd,MAAMM,UAAU,GAAGA,CAAA,KAAM;IACrBL,WAAW,CAAC,KAAK,CAAC;EACtB,CAAC;EAED,MAAMM,UAAU,GAAGA,CAAA,KAAM;IACrBN,WAAW,CAAC,IAAI,CAAC;EACrB,CAAC;EAED,MAAMO,UAAU,GAAGA,CAAA,KAAM;IACrBT,QAAQ,CAAC,CAAC,CAAC;EACf,CAAC;EAED,MAAMU,eAAe,GAAGA,CAAA,KAAM;IAC1BH,UAAU,CAAC,CAAC;IACZT,uBAAuB,CAACa,SAAS,IAAIA,SAAS,GAAG,CAAC,CAAC;IACnDF,UAAU,CAAC,CAAC;EAChB,CAAC;EAED,MAAMG,cAAc,GAAGA,CAAA,KAAM;IACzBL,UAAU,CAAC,CAAC;IACZT,uBAAuB,CAACa,SAAS,IAAIA,SAAS,GAAG,CAAC,CAAC;EACvD,CAAC;EAED,MAAME,eAAe,GAAGpB,OAAO,CAACI,oBAAoB,CAAC;EACrD,MAAMiB,gBAAgB,GAAGD,eAAe,GAAI,yBAAwBA,eAAe,CAACE,UAAW,EAAC,GAAG,EAAE;EAErG,oBACIzB,OAAA;IAAK0B,SAAS,EAAC,MAAM;IAAAC,QAAA,gBAEjB3B,OAAA;MAAK0B,SAAS,EAAC,mBAAmB;MAAAC,QAAA,eAC9B3B,OAAA;QAAI0B,SAAS,EAAC,UAAU;QAAAC,QAAA,EACnBJ,eAAe,gBACZvB,OAAA;UAAA2B,QAAA,eAEI3B,OAAA;YAAK4B,GAAG,EAAEJ,gBAAiB;YAACK,GAAG,EAAG,UAAStB,oBAAoB,GAAG,CAAE;UAAE;YAAAuB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAGxE,CAAC,gBAENjC,OAAA;UAAK0B,SAAS,EAAC,aAAa;UAAAC,QAAA,eACxB3B,OAAA,CAACF,UAAU;YAACoC,IAAI,EAAE,EAAG;YAACC,KAAK,EAAE,GAAI;YAACC,KAAK,EAAC;UAAO;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjD;MACR;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC,eAENjC,OAAA;MAAK0B,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACvB3B,OAAA;QAAQqC,OAAO,EAAEf,cAAe;QAACgB,QAAQ,EAAE/B,oBAAoB,KAAK,CAAE;QAAAoB,QAAA,EAAC;MAEvE;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTjC,OAAA;QAAQqC,OAAO,EAAEnB,UAAW;QAAAS,QAAA,EAAC;MAAK;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC3CjC,OAAA;QAAQqC,OAAO,EAAEjB,eAAgB;QAACkB,QAAQ,EAAE/B,oBAAoB,KAAKJ,OAAO,CAACoC,MAAM,GAAG,CAAE;QAAAZ,QAAA,EAAC;MAEzF;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC,eAENjC,OAAA;MAAA2B,QAAA,GAAK,SAAO,EAAClB,KAAK,EAAC,UAAQ;IAAA;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChC,CAAC;AAEd,CAAC;AAAC/B,EAAA,CAlFID,KAAK;AAAAuC,EAAA,GAALvC,KAAK;AAoFX,eAAeA,KAAK;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}